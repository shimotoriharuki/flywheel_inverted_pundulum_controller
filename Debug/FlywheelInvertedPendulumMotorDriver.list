
FlywheelInvertedPendulumMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003038  08003038  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003040  08003040  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08003054  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003054  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e873  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d60  00000000  00000000  0002e8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00030610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  000315a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f67  00000000  00000000  00032470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b826  00000000  00000000  000343d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1f9a  00000000  00000000  0003fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a4  00000000  00000000  00111c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003008 	.word	0x08003008

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003008 	.word	0x08003008

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fca0 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f80e 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f9e0 	bl	80008d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000514:	f000 f932 	bl	800077c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000518:	f000 f988 	bl	800082c <MX_TIM4_Init>
  MX_ADC1_Init();
 800051c:	f000 f878 	bl	8000610 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000520:	f000 f8f6 	bl	8000710 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000524:	f000 f8c6 	bl	80006b4 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x24>
	...

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2234      	movs	r2, #52	; 0x34
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fd5c 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <SystemClock_Config+0xdc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <SystemClock_Config+0xdc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <SystemClock_Config+0xdc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <SystemClock_Config+0xe0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a25      	ldr	r2, [pc, #148]	; (800060c <SystemClock_Config+0xe0>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <SystemClock_Config+0xe0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005a0:	23b4      	movs	r3, #180	; 0xb4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fded 	bl	8002194 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c0:	f000 fa08 	bl	80009d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005c4:	f001 faf0 	bl	8001ba8 <HAL_PWREx_EnableOverDrive>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ce:	f000 fa01 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fb29 	bl	8001c48 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005fc:	f000 f9ea 	bl	80009d4 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_ADC1_Init+0x98>)
 800062a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_ADC1_Init+0xa0>)
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_ADC1_Init+0x98>)
 800065e:	2201      	movs	r2, #1
 8000660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_ADC1_Init+0x98>)
 800066c:	2201      	movs	r2, #1
 800066e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000672:	f000 fc5d 	bl	8000f30 <HAL_ADC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 f9aa 	bl	80009d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000680:	2305      	movs	r3, #5
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000692:	f000 fc91 	bl	8000fb8 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800069c:	f000 f99a 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000114 	.word	0x20000114
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001

080006b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C3_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_I2C3_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C3_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_I2C3_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C3_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2C3_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_I2C3_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_I2C3_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2C3_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2C3_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2C3_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C3_Init+0x50>)
 80006f2:	f001 f921 	bl	8001938 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f96a 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	40005c00 	.word	0x40005c00
 800070c:	000186a0 	.word	0x000186a0

08000710 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI3_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI3_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI3_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI3_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI3_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI3_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI3_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI3_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI3_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI3_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI3_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI3_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI3_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI3_Init+0x64>)
 8000762:	f001 ff71 	bl	8002648 <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f932 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000bc 	.word	0x200000bc
 8000778:	40003c00 	.word	0x40003c00

0800077c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_TIM2_Init+0xac>)
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_TIM2_Init+0xac>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_TIM2_Init+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM2_Init+0xac>)
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_TIM2_Init+0xac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_TIM2_Init+0xac>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_TIM2_Init+0xac>)
 80007c8:	f001 ffa2 	bl	8002710 <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007d2:	f000 f8ff 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <MX_TIM2_Init+0xac>)
 80007e6:	f002 fb67 	bl	8002eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007f0:	f000 f8f0 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2204      	movs	r2, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM2_Init+0xac>)
 800080c:	f002 f83e 	bl	800288c <HAL_TIM_PWM_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000816:	f000 f8dd 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM2_Init+0xac>)
 800081c:	f000 fa74 	bl	8000d08 <HAL_TIM_MspPostInit>

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000015c 	.word	0x2000015c

0800082c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2224      	movs	r2, #36	; 0x24
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fbdc 	bl	8002ff8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_TIM4_Init+0xa0>)
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <MX_TIM4_Init+0xa4>)
 800084c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_TIM4_Init+0xa0>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_TIM4_Init+0xa0>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_TIM4_Init+0xa0>)
 800085c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000860:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_TIM4_Init+0xa0>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_TIM4_Init+0xa0>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800086e:	2303      	movs	r3, #3
 8000870:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000886:	2301      	movs	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_TIM4_Init+0xa0>)
 800089a:	f001 ff64 	bl	8002766 <HAL_TIM_Encoder_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f000 f896 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM4_Init+0xa0>)
 80008b6:	f002 faff 	bl	8002eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80008c0:	f000 f888 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3730      	adds	r7, #48	; 0x30
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	40000800 	.word	0x40000800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <MX_GPIO_Init+0xf4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a35      	ldr	r2, [pc, #212]	; (80009c8 <MX_GPIO_Init+0xf4>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <MX_GPIO_Init+0xf4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_GPIO_Init+0xf4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xf4>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2108      	movs	r1, #8
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_GPIO_Init+0xf8>)
 8000960:	f000 ffd0 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2120      	movs	r1, #32
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <MX_GPIO_Init+0xfc>)
 800096a:	f000 ffcb 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 800096e:	2308      	movs	r3, #8
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0xf8>)
 8000986:	f000 fe2b 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Pin SWB12_Pin */
  GPIO_InitStruct.Pin = SW_Pin|SWB12_Pin;
 800098a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0xfc>)
 80009a0:	f000 fe1e 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0xfc>)
 80009bc:	f000 fe10 	bl	80015e0 <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009da:	e7fe      	b.n	80009da <Error_Handler+0x6>

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_ADC_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d127      	bne.n	8000a9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MOTOR_CURRENT_Pin|ADC__Pin;
 8000a86:	23a0      	movs	r3, #160	; 0xa0
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_ADC_MspInit+0x84>)
 8000a9a:	f000 fda1 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40012000 	.word	0x40012000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <HAL_I2C_MspInit+0xc4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d14b      	bne.n	8000b6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b14:	2312      	movs	r3, #18
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b20:	2304      	movs	r3, #4
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4815      	ldr	r0, [pc, #84]	; (8000b80 <HAL_I2C_MspInit+0xcc>)
 8000b2c:	f000 fd58 	bl	80015e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b36:	2312      	movs	r3, #18
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b42:	2304      	movs	r3, #4
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <HAL_I2C_MspInit+0xd0>)
 8000b4e:	f000 fd47 	bl	80015e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40005c00 	.word	0x40005c00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <HAL_SPI_MspInit+0xa4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d13c      	bne.n	8000c24 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_SPI_MspInit+0xa8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_SPI_MspInit+0xa8>)
 8000bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_SPI_MspInit+0xa8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_SPI_MspInit+0xa8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_SPI_MspInit+0xa8>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_SPI_MspInit+0xa8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000be2:	2302      	movs	r3, #2
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_SPI_MspInit+0xac>)
 8000bfe:	f000 fcef 	bl	80015e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c14:	2306      	movs	r3, #6
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_SPI_MspInit+0xac>)
 8000c20:	f000 fcde 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020800 	.word	0x40020800

08000c38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_TIM_Encoder_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000cee:	f000 fc77 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40000800 	.word	0x40000800
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d11d      	bne.n	8000d66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_TIM_MspPostInit+0x68>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <HAL_TIM_MspPostInit+0x68>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_MspPostInit+0x68>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000d46:	2302      	movs	r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <HAL_TIM_MspPostInit+0x6c>)
 8000d62:	f000 fc3d 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f894 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <SystemInit+0x28>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <SystemInit+0x28>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SystemInit+0x28>)
 8000de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de6:	609a      	str	r2, [r3, #8]
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dfe:	e003      	b.n	8000e08 <LoopCopyDataInit>

08000e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e06:	3104      	adds	r1, #4

08000e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e10:	d3f6      	bcc.n	8000e00 <CopyDataInit>
  ldr  r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e14:	e002      	b.n	8000e1c <LoopFillZerobss>

08000e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e18:	f842 3b04 	str.w	r3, [r2], #4

08000e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e20:	d3f9      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ffd3 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 f8c3 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fb6b 	bl	8000504 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e34:	08003048 	.word	0x08003048
  ldr  r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e3c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e40:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e44:	200001a0 	.word	0x200001a0

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 fb7f 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fdac 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fb89 	bl	80015c6 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 fb5f 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	2000019c 	.word	0x2000019c

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000019c 	.word	0x2000019c

08000f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e033      	b.n	8000fae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fd6c 	bl	8000a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d118      	bne.n	8000fa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0202 	orr.w	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f94a 	bl	800121c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9e:	e001      	b.n	8000fa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x1c>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e113      	b.n	80011fc <HAL_ADC_ConfigChannel+0x244>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	d925      	bls.n	8001030 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68d9      	ldr	r1, [r3, #12]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b1e      	subs	r3, #30
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43da      	mvns	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	400a      	ands	r2, r1
 8001008:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68d9      	ldr	r1, [r3, #12]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	4603      	mov	r3, r0
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4403      	add	r3, r0
 8001022:	3b1e      	subs	r3, #30
 8001024:	409a      	lsls	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	e022      	b.n	8001076 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6919      	ldr	r1, [r3, #16]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	2207      	movs	r2, #7
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6919      	ldr	r1, [r3, #16]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	4603      	mov	r3, r0
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4403      	add	r3, r0
 800106c:	409a      	lsls	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b06      	cmp	r3, #6
 800107c:	d824      	bhi.n	80010c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	3b05      	subs	r3, #5
 8001090:	221f      	movs	r2, #31
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	400a      	ands	r2, r1
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b05      	subs	r3, #5
 80010ba:	fa00 f203 	lsl.w	r2, r0, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
 80010c6:	e04c      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	d824      	bhi.n	800111a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b23      	subs	r3, #35	; 0x23
 80010e2:	221f      	movs	r2, #31
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43da      	mvns	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	400a      	ands	r2, r1
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b23      	subs	r3, #35	; 0x23
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
 8001118:	e023      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b41      	subs	r3, #65	; 0x41
 800112c:	221f      	movs	r2, #31
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b41      	subs	r3, #65	; 0x41
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_ADC_ConfigChannel+0x250>)
 8001164:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a28      	ldr	r2, [pc, #160]	; (800120c <HAL_ADC_ConfigChannel+0x254>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d10f      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1d8>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d10b      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_ADC_ConfigChannel+0x254>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12b      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x23a>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_ADC_ConfigChannel+0x258>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d003      	beq.n	80011ac <HAL_ADC_ConfigChannel+0x1f4>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d122      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_ADC_ConfigChannel+0x258>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d111      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_ADC_ConfigChannel+0x25c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_ADC_ConfigChannel+0x260>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9a      	lsrs	r2, r3, #18
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011e4:	e002      	b.n	80011ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40012300 	.word	0x40012300
 800120c:	40012000 	.word	0x40012000
 8001210:	10000012 	.word	0x10000012
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83

0800121c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001224:	4b79      	ldr	r3, [pc, #484]	; (800140c <ADC_Init+0x1f0>)
 8001226:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	021a      	lsls	r2, r3, #8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6899      	ldr	r1, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <ADC_Init+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6899      	ldr	r1, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	e00f      	b.n	800131a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001318:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0202 	bic.w	r2, r2, #2
 8001328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e1b      	ldrb	r3, [r3, #24]
 8001334:	005a      	lsls	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01b      	beq.n	8001380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001356:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	3b01      	subs	r3, #1
 8001374:	035a      	lsls	r2, r3, #13
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	e007      	b.n	8001390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800138e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	051a      	lsls	r2, r3, #20
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6899      	ldr	r1, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d2:	025a      	lsls	r2, r3, #9
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6899      	ldr	r1, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	029a      	lsls	r2, r3, #10
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	609a      	str	r2, [r3, #8]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40012300 	.word	0x40012300
 8001410:	0f000001 	.word	0x0f000001

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff47 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff5c 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff8e 	bl	80014cc <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5d 	bl	8001478 <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffb0 	bl	8001534 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e165      	b.n	80018c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8154 	bne.w	80018c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d00b      	beq.n	800163a <HAL_GPIO_Init+0x5a>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162e:	2b11      	cmp	r3, #17
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b12      	cmp	r3, #18
 8001638:	d130      	bne.n	800169c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0201 	and.w	r2, r3, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0xfc>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b12      	cmp	r3, #18
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80ae 	beq.w	80018c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_GPIO_Init+0x2fc>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a5b      	ldr	r2, [pc, #364]	; (80018dc <HAL_GPIO_Init+0x2fc>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_GPIO_Init+0x2fc>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_GPIO_Init+0x300>)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_GPIO_Init+0x304>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x21a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x308>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x216>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_GPIO_Init+0x30c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x212>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <HAL_GPIO_Init+0x310>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4a      	ldr	r2, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x314>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x20a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_GPIO_Init+0x318>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x206>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x31c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x202>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00c      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017fa:	2300      	movs	r3, #0
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800180c:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_GPIO_Init+0x300>)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181a:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_GPIO_Init+0x320>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800183e:	4a30      	ldr	r2, [pc, #192]	; (8001900 <HAL_GPIO_Init+0x320>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_GPIO_Init+0x320>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001868:	4a25      	ldr	r2, [pc, #148]	; (8001900 <HAL_GPIO_Init+0x320>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_GPIO_Init+0x320>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_GPIO_Init+0x320>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x320>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_GPIO_Init+0x320>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	f67f ae96 	bls.w	80015fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d0:	bf00      	nop
 80018d2:	3724      	adds	r7, #36	; 0x24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40021800 	.word	0x40021800
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e11f      	b.n	8001b8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f8a8 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2224      	movs	r2, #36	; 0x24
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800198a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800199a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800199c:	f000 fa46 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80019a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a7b      	ldr	r2, [pc, #492]	; (8001b94 <HAL_I2C_Init+0x25c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d807      	bhi.n	80019bc <HAL_I2C_Init+0x84>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a7a      	ldr	r2, [pc, #488]	; (8001b98 <HAL_I2C_Init+0x260>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e006      	b.n	80019ca <HAL_I2C_Init+0x92>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_I2C_Init+0x264>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bf94      	ite	ls
 80019c4:	2301      	movls	r3, #1
 80019c6:	2300      	movhi	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0db      	b.n	8001b8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a72      	ldr	r2, [pc, #456]	; (8001ba0 <HAL_I2C_Init+0x268>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a64      	ldr	r2, [pc, #400]	; (8001b94 <HAL_I2C_Init+0x25c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d802      	bhi.n	8001a0c <HAL_I2C_Init+0xd4>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	e009      	b.n	8001a20 <HAL_I2C_Init+0xe8>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_I2C_Init+0x26c>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	3301      	adds	r3, #1
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4956      	ldr	r1, [pc, #344]	; (8001b94 <HAL_I2C_Init+0x25c>)
 8001a3c:	428b      	cmp	r3, r1
 8001a3e:	d80d      	bhi.n	8001a5c <HAL_I2C_Init+0x124>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e59      	subs	r1, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	bf38      	it	cc
 8001a58:	2304      	movcc	r3, #4
 8001a5a:	e04f      	b.n	8001afc <HAL_I2C_Init+0x1c4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <HAL_I2C_Init+0x150>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e58      	subs	r0, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e012      	b.n	8001aae <HAL_I2C_Init+0x176>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e58      	subs	r0, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	0099      	lsls	r1, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x17e>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e022      	b.n	8001afc <HAL_I2C_Init+0x1c4>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10e      	bne.n	8001adc <HAL_I2C_Init+0x1a4>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e58      	subs	r0, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	440b      	add	r3, r1
 8001acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ada:	e00f      	b.n	8001afc <HAL_I2C_Init+0x1c4>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e58      	subs	r0, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	0099      	lsls	r1, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6911      	ldr	r1, [r2, #16]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68d2      	ldr	r2, [r2, #12]
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	000186a0 	.word	0x000186a0
 8001b98:	001e847f 	.word	0x001e847f
 8001b9c:	003d08ff 	.word	0x003d08ff
 8001ba0:	431bde83 	.word	0x431bde83
 8001ba4:	10624dd3 	.word	0x10624dd3

08001ba8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_PWREx_EnableOverDrive+0x94>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff f9a0 	bl	8000f18 <HAL_GetTick>
 8001bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bda:	e009      	b.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bdc:	f7ff f99c 	bl	8000f18 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bea:	d901      	bls.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e01f      	b.n	8001c30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7ff f988 	bl	8000f18 <HAL_GetTick>
 8001c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c0a:	e009      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c0c:	f7ff f984 	bl	8000f18 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e007      	b.n	8001c30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	420e0040 	.word	0x420e0040
 8001c40:	40007000 	.word	0x40007000
 8001c44:	420e0044 	.word	0x420e0044

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f8ee 	bl	8000f18 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f8ea 	bl	8000f18 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f841 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	fa21 f303 	lsr.w	r3, r1, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f84e 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08003020 	.word	0x08003020
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4601      	mov	r1, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08003030 	.word	0x08003030

08001e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6e:	4bc6      	ldr	r3, [pc, #792]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	f200 817e 	bhi.w	8002178 <HAL_RCC_GetSysClockFreq+0x324>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_RCC_GetSysClockFreq+0x30>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08002179 	.word	0x08002179
 8001e8c:	08002179 	.word	0x08002179
 8001e90:	08002179 	.word	0x08002179
 8001e94:	08001ebf 	.word	0x08001ebf
 8001e98:	08002179 	.word	0x08002179
 8001e9c:	08002179 	.word	0x08002179
 8001ea0:	08002179 	.word	0x08002179
 8001ea4:	08001ec5 	.word	0x08001ec5
 8001ea8:	08002179 	.word	0x08002179
 8001eac:	08002179 	.word	0x08002179
 8001eb0:	08002179 	.word	0x08002179
 8001eb4:	08002021 	.word	0x08002021
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4bb4      	ldr	r3, [pc, #720]	; (800218c <HAL_RCC_GetSysClockFreq+0x338>)
 8001eba:	613b      	str	r3, [r7, #16]
       break;
 8001ebc:	e15f      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ebe:	4bb4      	ldr	r3, [pc, #720]	; (8002190 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001ec0:	613b      	str	r3, [r7, #16]
      break;
 8001ec2:	e15c      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4bb0      	ldr	r3, [pc, #704]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ecc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ece:	4bae      	ldr	r3, [pc, #696]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d04a      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4bab      	ldr	r3, [pc, #684]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	f04f 0400 	mov.w	r4, #0
 8001ee4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	ea03 0501 	and.w	r5, r3, r1
 8001ef0:	ea04 0602 	and.w	r6, r4, r2
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	4632      	mov	r2, r6
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f04f 0400 	mov.w	r4, #0
 8001f00:	0154      	lsls	r4, r2, #5
 8001f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f06:	014b      	lsls	r3, r1, #5
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4622      	mov	r2, r4
 8001f0c:	1b49      	subs	r1, r1, r5
 8001f0e:	eb62 0206 	sbc.w	r2, r2, r6
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	0194      	lsls	r4, r2, #6
 8001f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f20:	018b      	lsls	r3, r1, #6
 8001f22:	1a5b      	subs	r3, r3, r1
 8001f24:	eb64 0402 	sbc.w	r4, r4, r2
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	00e2      	lsls	r2, r4, #3
 8001f32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f36:	00d9      	lsls	r1, r3, #3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4614      	mov	r4, r2
 8001f3c:	195b      	adds	r3, r3, r5
 8001f3e:	eb44 0406 	adc.w	r4, r4, r6
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	0262      	lsls	r2, r4, #9
 8001f4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f50:	0259      	lsls	r1, r3, #9
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	4621      	mov	r1, r4
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f04f 0400 	mov.w	r4, #0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4623      	mov	r3, r4
 8001f64:	f7fe f94e 	bl	8000204 <__aeabi_uldivmod>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e049      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f70:	4b85      	ldr	r3, [pc, #532]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	ea03 0501 	and.w	r5, r3, r1
 8001f86:	ea04 0602 	and.w	r6, r4, r2
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	4632      	mov	r2, r6
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	0154      	lsls	r4, r2, #5
 8001f98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9c:	014b      	lsls	r3, r1, #5
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	1b49      	subs	r1, r1, r5
 8001fa4:	eb62 0206 	sbc.w	r2, r2, r6
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	f04f 0400 	mov.w	r4, #0
 8001fb0:	0194      	lsls	r4, r2, #6
 8001fb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb6:	018b      	lsls	r3, r1, #6
 8001fb8:	1a5b      	subs	r3, r3, r1
 8001fba:	eb64 0402 	sbc.w	r4, r4, r2
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	00e2      	lsls	r2, r4, #3
 8001fc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fcc:	00d9      	lsls	r1, r3, #3
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	195b      	adds	r3, r3, r5
 8001fd4:	eb44 0406 	adc.w	r4, r4, r6
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	02a2      	lsls	r2, r4, #10
 8001fe2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fe6:	0299      	lsls	r1, r3, #10
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4614      	mov	r4, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	4621      	mov	r1, r4
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f04f 0400 	mov.w	r4, #0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	f7fe f903 	bl	8000204 <__aeabi_uldivmod>
 8001ffe:	4603      	mov	r3, r0
 8002000:	460c      	mov	r4, r1
 8002002:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002004:	4b60      	ldr	r3, [pc, #384]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	613b      	str	r3, [r7, #16]
      break;
 800201e:	e0ae      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002028:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04a      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	099b      	lsrs	r3, r3, #6
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	ea03 0501 	and.w	r5, r3, r1
 800204c:	ea04 0602 	and.w	r6, r4, r2
 8002050:	4629      	mov	r1, r5
 8002052:	4632      	mov	r2, r6
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	0154      	lsls	r4, r2, #5
 800205e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002062:	014b      	lsls	r3, r1, #5
 8002064:	4619      	mov	r1, r3
 8002066:	4622      	mov	r2, r4
 8002068:	1b49      	subs	r1, r1, r5
 800206a:	eb62 0206 	sbc.w	r2, r2, r6
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	f04f 0400 	mov.w	r4, #0
 8002076:	0194      	lsls	r4, r2, #6
 8002078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800207c:	018b      	lsls	r3, r1, #6
 800207e:	1a5b      	subs	r3, r3, r1
 8002080:	eb64 0402 	sbc.w	r4, r4, r2
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	00e2      	lsls	r2, r4, #3
 800208e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002092:	00d9      	lsls	r1, r3, #3
 8002094:	460b      	mov	r3, r1
 8002096:	4614      	mov	r4, r2
 8002098:	195b      	adds	r3, r3, r5
 800209a:	eb44 0406 	adc.w	r4, r4, r6
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	0262      	lsls	r2, r4, #9
 80020a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020ac:	0259      	lsls	r1, r3, #9
 80020ae:	460b      	mov	r3, r1
 80020b0:	4614      	mov	r4, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	4621      	mov	r1, r4
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f04f 0400 	mov.w	r4, #0
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	f7fe f8a0 	bl	8000204 <__aeabi_uldivmod>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e049      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	ea03 0501 	and.w	r5, r3, r1
 80020e2:	ea04 0602 	and.w	r6, r4, r2
 80020e6:	4629      	mov	r1, r5
 80020e8:	4632      	mov	r2, r6
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	f04f 0400 	mov.w	r4, #0
 80020f2:	0154      	lsls	r4, r2, #5
 80020f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020f8:	014b      	lsls	r3, r1, #5
 80020fa:	4619      	mov	r1, r3
 80020fc:	4622      	mov	r2, r4
 80020fe:	1b49      	subs	r1, r1, r5
 8002100:	eb62 0206 	sbc.w	r2, r2, r6
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f04f 0400 	mov.w	r4, #0
 800210c:	0194      	lsls	r4, r2, #6
 800210e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002112:	018b      	lsls	r3, r1, #6
 8002114:	1a5b      	subs	r3, r3, r1
 8002116:	eb64 0402 	sbc.w	r4, r4, r2
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	00e2      	lsls	r2, r4, #3
 8002124:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002128:	00d9      	lsls	r1, r3, #3
 800212a:	460b      	mov	r3, r1
 800212c:	4614      	mov	r4, r2
 800212e:	195b      	adds	r3, r3, r5
 8002130:	eb44 0406 	adc.w	r4, r4, r6
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	02a2      	lsls	r2, r4, #10
 800213e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002142:	0299      	lsls	r1, r3, #10
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	4618      	mov	r0, r3
 800214a:	4621      	mov	r1, r4
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f04f 0400 	mov.w	r4, #0
 8002152:	461a      	mov	r2, r3
 8002154:	4623      	mov	r3, r4
 8002156:	f7fe f855 	bl	8000204 <__aeabi_uldivmod>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	0f1b      	lsrs	r3, r3, #28
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_RCC_GetSysClockFreq+0x338>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	693b      	ldr	r3, [r7, #16]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200

08002194 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8083 	beq.w	80022b4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021ae:	4b95      	ldr	r3, [pc, #596]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d019      	beq.n	80021ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ba:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021c6:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d2:	d00c      	beq.n	80021ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d112      	bne.n	8002206 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e0:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d10b      	bne.n	8002206 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ee:	4b85      	ldr	r3, [pc, #532]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d05b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x11e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d157      	bne.n	80022b2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e216      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x8a>
 8002210:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a7b      	ldr	r2, [pc, #492]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e01d      	b.n	800225a <HAL_RCC_OscConfig+0xc6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0xae>
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a75      	ldr	r2, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800222e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b73      	ldr	r3, [pc, #460]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a72      	ldr	r2, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0xc6>
 8002242:	4b70      	ldr	r3, [pc, #448]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6f      	ldr	r2, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6c      	ldr	r2, [pc, #432]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d013      	beq.n	800228a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fe59 	bl	8000f18 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226a:	f7fe fe55 	bl	8000f18 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	; 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1db      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0xd6>
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fe45 	bl	8000f18 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002292:	f7fe fe41 	bl	8000f18 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1c7      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0xfe>
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d06f      	beq.n	80023a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d017      	beq.n	80022fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022cc:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d11c      	bne.n	800232a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f0:	4b44      	ldr	r3, [pc, #272]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d116      	bne.n	800232a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_OscConfig+0x180>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e18f      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4938      	ldr	r1, [pc, #224]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002328:	e03a      	b.n	80023a0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d020      	beq.n	8002374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_RCC_OscConfig+0x274>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fdee 	bl	8000f18 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002340:	f7fe fdea 	bl	8000f18 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e170      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4925      	ldr	r1, [pc, #148]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
 8002372:	e015      	b.n	80023a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_OscConfig+0x274>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fdcd 	bl	8000f18 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fdc9 	bl	8000f18 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e14f      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d037      	beq.n	800241c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d016      	beq.n	80023e2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_RCC_OscConfig+0x278>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fdad 	bl	8000f18 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fda9 	bl	8000f18 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e12f      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x22e>
 80023e0:	e01c      	b.n	800241c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_OscConfig+0x278>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7fe fd96 	bl	8000f18 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f0:	f7fe fd92 	bl	8000f18 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d908      	bls.n	8002410 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e118      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	42470000 	.word	0x42470000
 800240c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	4b8a      	ldr	r3, [pc, #552]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e9      	bne.n	80023f0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8097 	beq.w	8002558 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b83      	ldr	r3, [pc, #524]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b7f      	ldr	r3, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a7e      	ldr	r2, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b7c      	ldr	r3, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_RCC_OscConfig+0x4ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7fe fd51 	bl	8000f18 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7fe fd4d 	bl	8000f18 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0d3      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x31a>
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x354>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x33c>
 80024b6:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a60      	ldr	r2, [pc, #384]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a5d      	ldr	r2, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0x354>
 80024d0:	4b5a      	ldr	r3, [pc, #360]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a59      	ldr	r2, [pc, #356]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	4b57      	ldr	r3, [pc, #348]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a56      	ldr	r2, [pc, #344]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80024e2:	f023 0304 	bic.w	r3, r3, #4
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe fd12 	bl	8000f18 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe fd0e 	bl	8000f18 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e092      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	4b4b      	ldr	r3, [pc, #300]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0ee      	beq.n	80024f8 <HAL_RCC_OscConfig+0x364>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe fcfc 	bl	8000f18 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe fcf8 	bl	8000f18 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e07c      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	4a3a      	ldr	r2, [pc, #232]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d068      	beq.n	8002632 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d060      	beq.n	800262e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d145      	bne.n	8002600 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <HAL_RCC_OscConfig+0x4b0>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7fe fccd 	bl	8000f18 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fcc9 	bl	8000f18 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e04f      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	019b      	lsls	r3, r3, #6
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	3b01      	subs	r3, #1
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	071b      	lsls	r3, r3, #28
 80025cc:	491b      	ldr	r1, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_RCC_OscConfig+0x4b0>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fc9e 	bl	8000f18 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fc9a 	bl	8000f18 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e020      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44c>
 80025fe:	e018      	b.n	8002632 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCC_OscConfig+0x4b0>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fc87 	bl	8000f18 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fc83 	bl	8000f18 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e009      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x4a8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x47a>
 800262c:	e001      	b.n	8002632 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	40007000 	.word	0x40007000
 8002644:	42470060 	.word	0x42470060

08002648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e056      	b.n	8002708 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d106      	bne.n	800267a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe fa87 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002690:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	ea42 0103 	orr.w	r1, r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	f003 0104 	and.w	r1, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e01d      	b.n	800275e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fa7e 	bl	8000c38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 f962 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e083      	b.n	8002882 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fa72 	bl	8000c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027aa:	f023 0307 	bic.w	r3, r3, #7
 80027ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 f92c 	bl	8002a18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e8:	f023 0303 	bic.w	r3, r3, #3
 80027ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4313      	orrs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002806:	f023 030c 	bic.w	r3, r3, #12
 800280a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	4313      	orrs	r3, r2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	011a      	lsls	r2, r3, #4
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	031b      	lsls	r3, r3, #12
 8002836:	4313      	orrs	r3, r2
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002844:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800284c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4313      	orrs	r3, r2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0b4      	b.n	8002a10 <HAL_TIM_PWM_ConfigChannel+0x184>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	f200 809f 	bhi.w	80029fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028f9 	.word	0x080028f9
 80028c8:	080029fd 	.word	0x080029fd
 80028cc:	080029fd 	.word	0x080029fd
 80028d0:	080029fd 	.word	0x080029fd
 80028d4:	08002939 	.word	0x08002939
 80028d8:	080029fd 	.word	0x080029fd
 80028dc:	080029fd 	.word	0x080029fd
 80028e0:	080029fd 	.word	0x080029fd
 80028e4:	0800297b 	.word	0x0800297b
 80028e8:	080029fd 	.word	0x080029fd
 80028ec:	080029fd 	.word	0x080029fd
 80028f0:	080029fd 	.word	0x080029fd
 80028f4:	080029bb 	.word	0x080029bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f92a 	bl	8002b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6999      	ldr	r1, [r3, #24]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	619a      	str	r2, [r3, #24]
      break;
 8002936:	e062      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f97a 	bl	8002c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6999      	ldr	r1, [r3, #24]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	021a      	lsls	r2, r3, #8
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	619a      	str	r2, [r3, #24]
      break;
 8002978:	e041      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f9cf 	bl	8002d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0208 	orr.w	r2, r2, #8
 8002994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0204 	bic.w	r2, r2, #4
 80029a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69d9      	ldr	r1, [r3, #28]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	61da      	str	r2, [r3, #28]
      break;
 80029b8:	e021      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fa23 	bl	8002e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	021a      	lsls	r2, r3, #8
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	61da      	str	r2, [r3, #28]
      break;
 80029fa:	e000      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80029fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a40      	ldr	r2, [pc, #256]	; (8002b2c <TIM_Base_SetConfig+0x114>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <TIM_Base_SetConfig+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d00f      	beq.n	8002a58 <TIM_Base_SetConfig+0x40>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3d      	ldr	r2, [pc, #244]	; (8002b30 <TIM_Base_SetConfig+0x118>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3c      	ldr	r2, [pc, #240]	; (8002b34 <TIM_Base_SetConfig+0x11c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3b      	ldr	r2, [pc, #236]	; (8002b38 <TIM_Base_SetConfig+0x120>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <TIM_Base_SetConfig+0x124>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d108      	bne.n	8002a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <TIM_Base_SetConfig+0x114>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02b      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d027      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <TIM_Base_SetConfig+0x118>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d023      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <TIM_Base_SetConfig+0x11c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <TIM_Base_SetConfig+0x120>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01b      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <TIM_Base_SetConfig+0x124>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d017      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <TIM_Base_SetConfig+0x128>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <TIM_Base_SetConfig+0x12c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00f      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <TIM_Base_SetConfig+0x130>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00b      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <TIM_Base_SetConfig+0x134>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d007      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <TIM_Base_SetConfig+0x138>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d003      	beq.n	8002aca <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <TIM_Base_SetConfig+0x13c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d108      	bne.n	8002adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <TIM_Base_SetConfig+0x114>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0xf8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <TIM_Base_SetConfig+0x124>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d103      	bne.n	8002b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	615a      	str	r2, [r3, #20]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40010400 	.word	0x40010400
 8002b40:	40014000 	.word	0x40014000
 8002b44:	40014400 	.word	0x40014400
 8002b48:	40014800 	.word	0x40014800
 8002b4c:	40001800 	.word	0x40001800
 8002b50:	40001c00 	.word	0x40001c00
 8002b54:	40002000 	.word	0x40002000

08002b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f023 0302 	bic.w	r3, r3, #2
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <TIM_OC1_SetConfig+0xd8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_OC1_SetConfig+0x64>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <TIM_OC1_SetConfig+0xdc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10c      	bne.n	8002bd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0308 	bic.w	r3, r3, #8
 8002bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <TIM_OC1_SetConfig+0xd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_OC1_SetConfig+0x8e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <TIM_OC1_SetConfig+0xdc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d111      	bne.n	8002c0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40010400 	.word	0x40010400

08002c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0210 	bic.w	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f023 0320 	bic.w	r3, r3, #32
 8002c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <TIM_OC2_SetConfig+0xe4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC2_SetConfig+0x68>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <TIM_OC2_SetConfig+0xe8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d10d      	bne.n	8002cbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <TIM_OC2_SetConfig+0xe4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_OC2_SetConfig+0x94>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <TIM_OC2_SetConfig+0xe8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d113      	bne.n	8002cf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40010400 	.word	0x40010400

08002d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <TIM_OC3_SetConfig+0xe0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_OC3_SetConfig+0x66>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <TIM_OC3_SetConfig+0xe4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10d      	bne.n	8002da6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <TIM_OC3_SetConfig+0xe0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_OC3_SetConfig+0x92>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <TIM_OC3_SetConfig+0xe4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d113      	bne.n	8002dde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	621a      	str	r2, [r3, #32]
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40010400 	.word	0x40010400

08002e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	031b      	lsls	r3, r3, #12
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <TIM_OC4_SetConfig+0xa4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_OC4_SetConfig+0x68>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <TIM_OC4_SetConfig+0xa8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e05a      	b.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d01d      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10c      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40010400 	.word	0x40010400
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40001800 	.word	0x40001800

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4e0d      	ldr	r6, [pc, #52]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1ba4      	subs	r4, r4, r6
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2500      	movs	r5, #0
 8002fbc:	42a5      	cmp	r5, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4e0b      	ldr	r6, [pc, #44]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 f820 	bl	8003008 <_init>
 8002fc8:	1ba4      	subs	r4, r4, r6
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2500      	movs	r5, #0
 8002fce:	42a5      	cmp	r5, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd8:	4798      	blx	r3
 8002fda:	3501      	adds	r5, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe2:	4798      	blx	r3
 8002fe4:	3501      	adds	r5, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003040 	.word	0x08003040
 8002fec:	08003040 	.word	0x08003040
 8002ff0:	08003040 	.word	0x08003040
 8002ff4:	08003044 	.word	0x08003044

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
