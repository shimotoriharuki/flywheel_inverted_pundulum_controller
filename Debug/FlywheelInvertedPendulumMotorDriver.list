
FlywheelInvertedPendulumMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004990  08004990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000010  080049a8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080049a8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012502  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026a2  00000000  00000000  0003253e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  00034be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004550  00000000  00000000  00036d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da24  00000000  00000000  0003b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2e8a  00000000  00000000  00048ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011bb6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af0  00000000  00000000  0011bbec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004950 	.word	0x08004950

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08004950 	.word	0x08004950

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b972 	b.w	8000e00 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4688      	mov	r8, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14b      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4615      	mov	r5, r2
 8000b46:	d967      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0720 	rsb	r7, r2, #32
 8000b52:	fa01 f302 	lsl.w	r3, r1, r2
 8000b56:	fa20 f707 	lsr.w	r7, r0, r7
 8000b5a:	4095      	lsls	r5, r2
 8000b5c:	ea47 0803 	orr.w	r8, r7, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b6c:	fa1f fc85 	uxth.w	ip, r5
 8000b70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b78:	fb07 f10c 	mul.w	r1, r7, ip
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18eb      	adds	r3, r5, r3
 8000b82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b86:	f080 811b 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8118 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000b90:	3f02      	subs	r7, #2
 8000b92:	442b      	add	r3, r5
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	192c      	adds	r4, r5, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8107 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	f240 8104 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	442c      	add	r4, r5
 8000bc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc4:	eba4 040c 	sub.w	r4, r4, ip
 8000bc8:	2700      	movs	r7, #0
 8000bca:	b11e      	cbz	r6, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0xbe>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80eb 	beq.w	8000dba <__udivmoddi4+0x286>
 8000be4:	2700      	movs	r7, #0
 8000be6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bea:	4638      	mov	r0, r7
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f783 	clz	r7, r3
 8000bf6:	2f00      	cmp	r7, #0
 8000bf8:	d147      	bne.n	8000c8a <__udivmoddi4+0x156>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xd0>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2c4>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d0e0      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c12:	e9c6 4800 	strd	r4, r8, [r6]
 8000c16:	e7dd      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c18:	b902      	cbnz	r2, 8000c1c <__udivmoddi4+0xe8>
 8000c1a:	deff      	udf	#255	; 0xff
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f040 808f 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c26:	1b49      	subs	r1, r1, r5
 8000c28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2c:	fa1f f885 	uxth.w	r8, r5
 8000c30:	2701      	movs	r7, #1
 8000c32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c36:	0c23      	lsrs	r3, r4, #16
 8000c38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb08 f10c 	mul.w	r1, r8, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x14c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x14a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80b6 	bhi.w	8000dea <__udivmoddi4+0x2b6>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e79f      	b.n	8000bca <__udivmoddi4+0x96>
 8000c8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8e:	40bb      	lsls	r3, r7
 8000c90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c98:	fa01 f407 	lsl.w	r4, r1, r7
 8000c9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca8:	4325      	orrs	r5, r4
 8000caa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cae:	0c2c      	lsrs	r4, r5, #16
 8000cb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb4:	fa1f fa8e 	uxth.w	sl, lr
 8000cb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd4:	f080 8087 	bcs.w	8000de6 <__udivmoddi4+0x2b2>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f240 8084 	bls.w	8000de6 <__udivmoddi4+0x2b2>
 8000cde:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce2:	4473      	add	r3, lr
 8000ce4:	1b1b      	subs	r3, r3, r4
 8000ce6:	b2ad      	uxth	r5, r5
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf8:	45a2      	cmp	sl, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d04:	d26b      	bcs.n	8000dde <__udivmoddi4+0x2aa>
 8000d06:	45a2      	cmp	sl, r4
 8000d08:	d969      	bls.n	8000dde <__udivmoddi4+0x2aa>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4474      	add	r4, lr
 8000d0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d12:	fba0 8902 	umull	r8, r9, r0, r2
 8000d16:	eba4 040a 	sub.w	r4, r4, sl
 8000d1a:	454c      	cmp	r4, r9
 8000d1c:	46c2      	mov	sl, r8
 8000d1e:	464b      	mov	r3, r9
 8000d20:	d354      	bcc.n	8000dcc <__udivmoddi4+0x298>
 8000d22:	d051      	beq.n	8000dc8 <__udivmoddi4+0x294>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d069      	beq.n	8000dfc <__udivmoddi4+0x2c8>
 8000d28:	ebb1 050a 	subs.w	r5, r1, sl
 8000d2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	40fc      	lsrs	r4, r7
 8000d38:	ea4c 0505 	orr.w	r5, ip, r5
 8000d3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d40:	2700      	movs	r7, #0
 8000d42:	e747      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f703 	lsr.w	r7, r0, r3
 8000d4c:	4095      	lsls	r5, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	fa21 f303 	lsr.w	r3, r1, r3
 8000d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5a:	4338      	orrs	r0, r7
 8000d5c:	0c01      	lsrs	r1, r0, #16
 8000d5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d62:	fa1f f885 	uxth.w	r8, r5
 8000d66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb07 f308 	mul.w	r3, r7, r8
 8000d72:	428b      	cmp	r3, r1
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x256>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d80:	d22f      	bcs.n	8000de2 <__udivmoddi4+0x2ae>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d92d      	bls.n	8000de2 <__udivmoddi4+0x2ae>
 8000d86:	3f02      	subs	r7, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	b281      	uxth	r1, r0
 8000d8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9a:	fb00 f308 	mul.w	r3, r0, r8
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x27e>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da8:	d217      	bcs.n	8000dda <__udivmoddi4+0x2a6>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d915      	bls.n	8000dda <__udivmoddi4+0x2a6>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db8:	e73b      	b.n	8000c32 <__udivmoddi4+0xfe>
 8000dba:	4637      	mov	r7, r6
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e709      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	e6e7      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6fb      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc8:	4541      	cmp	r1, r8
 8000dca:	d2ab      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dcc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	e7a4      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000dda:	4660      	mov	r0, ip
 8000ddc:	e7e9      	b.n	8000db2 <__udivmoddi4+0x27e>
 8000dde:	4618      	mov	r0, r3
 8000de0:	e795      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de2:	4667      	mov	r7, ip
 8000de4:	e7d1      	b.n	8000d8a <__udivmoddi4+0x256>
 8000de6:	4681      	mov	r9, r0
 8000de8:	e77c      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dea:	3802      	subs	r0, #2
 8000dec:	442c      	add	r4, r5
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0x14c>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	442b      	add	r3, r5
 8000df6:	e72f      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df8:	4638      	mov	r0, r7
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xda>
 8000dfc:	4637      	mov	r7, r6
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0xa0>

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <_ZN7EncoderC1Ev>:
#define PI 3.1415926535
#define ENCODER_RESOLUTION 1024
#define REDUCTION_RATIO 1 //Gear reduction ratio 0.35
#define ANGLE_PER_CNT ((2 * PI / ENCODER_RESOLUTION) * REDUCTION_RATIO)

Encoder::Encoder() : cnt_(0), total_cnt_(0), angle_(0){}
 8000e04:	b490      	push	{r4, r7}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	f04f 0400 	mov.w	r4, #0
 8000e16:	e9c2 3400 	strd	r3, r4, [r2]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	f04f 0400 	mov.w	r4, #0
 8000e24:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	f04f 0400 	mov.w	r4, #0
 8000e32:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc90      	pop	{r4, r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000e4c:	213c      	movs	r1, #60	; 0x3c
 8000e4e:	4810      	ldr	r0, [pc, #64]	; (8000e90 <_ZN7Encoder4initEv+0x4c>)
 8000e50:	f003 f81e 	bl	8003e90 <HAL_TIM_Encoder_Start>
	TIM4 -> CNT = CNT_OFFSET;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <_ZN7Encoder4initEv+0x50>)
 8000e56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
	cnt_ = 0;
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	f04f 0400 	mov.w	r4, #0
 8000e66:	e9c2 3400 	strd	r3, r4, [r2]
	total_cnt_ = 0;
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	f04f 0400 	mov.w	r4, #0
 8000e74:	e9c2 3402 	strd	r3, r4, [r2, #8]
	angle_ = 0;
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	f04f 0400 	mov.w	r4, #0
 8000e82:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000a4 	.word	0x200000a4
 8000e94:	40000800 	.word	0x40000800

08000e98 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	cnt_ = (float(CNT_OFFSET) - float(TIM4 -> CNT));
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <_ZN7Encoder9updateCntEv+0x88>)
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000f24 <_ZN7Encoder9updateCntEv+0x8c>
 8000eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb4:	ee17 0a90 	vmov	r0, s15
 8000eb8:	f7ff fb0a 	bl	80004d0 <__aeabi_f2d>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	e9c2 3400 	strd	r3, r4, [r2]
	total_cnt_ += cnt_;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	f7ff f99d 	bl	8000214 <__adddf3>
 8000eda:	4603      	mov	r3, r0
 8000edc:	460c      	mov	r4, r1
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	angle_ += cnt_ * ANGLE_PER_CNT;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef0:	a309      	add	r3, pc, #36	; (adr r3, 8000f18 <_ZN7Encoder9updateCntEv+0x80>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff fb43 	bl	8000580 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff f987 	bl	8000214 <__adddf3>
 8000f06:	4603      	mov	r3, r0
 8000f08:	460c      	mov	r4, r1
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	54411744 	.word	0x54411744
 8000f1c:	3f7921fb 	.word	0x3f7921fb
 8000f20:	40000800 	.word	0x40000800
 8000f24:	47000000 	.word	0x47000000

08000f28 <_ZN7Encoder8clearCntEv>:
{
	return cnt_;
}

void Encoder::clearCnt()
{
 8000f28:	b490      	push	{r4, r7}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	cnt_ = 0;
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	f04f 0400 	mov.w	r4, #0
 8000f3a:	e9c2 3400 	strd	r3, r4, [r2]
	TIM4 -> CNT = CNT_OFFSET;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <_ZN7Encoder8clearCntEv+0x28>)
 8000f40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc90      	pop	{r4, r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40000800 	.word	0x40000800

08000f54 <_ZN7Encoder8getAngleEv>:
{
	total_cnt_ = 0;
}

double Encoder::getAngle()
{
 8000f54:	b490      	push	{r4, r7}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	return angle_;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000f62:	ec44 3b17 	vmov	d7, r3, r4
}
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	eef0 0a67 	vmov.f32	s1, s15
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc90      	pop	{r4, r7}
 8000f74:	4770      	bx	lr

08000f76 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_counter_period_(0){}
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	801a      	strh	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_ZN5Motor4initEv>:

void Motor::init()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <_ZN5Motor4initEv+0x18>)
 8000fa0:	f002 fea6 	bl	8003cf0 <HAL_TIM_PWM_Start>

}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000228 	.word	0x20000228

08000fb0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	uint16_t counter_period;

	if(temp_counter_period_ < 0) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da0c      	bge.n	8000fdc <_ZN5Motor9motorCtrlEv+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <_ZN5Motor9motorCtrlEv+0x50>)
 8000fc8:	f001 ff12 	bl	8002df0 <HAL_GPIO_WritePin>
		counter_period = -1 * temp_counter_period_;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	e009      	b.n	8000ff0 <_ZN5Motor9motorCtrlEv+0x40>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2108      	movs	r1, #8
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <_ZN5Motor9motorCtrlEv+0x50>)
 8000fe2:	f001 ff05 	bl	8002df0 <HAL_GPIO_WritePin>
		counter_period = temp_counter_period_;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, counter_period);
 8000ff0:	89fa      	ldrh	r2, [r7, #14]
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <_ZN5Motor9motorCtrlEv+0x54>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40020000 	.word	0x40020000
 8001004:	20000228 	.word	0x20000228

08001008 <_ZN5Motor8setRatioEd>:

void Motor::setRatio(double ratio)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	ed87 0b00 	vstr	d0, [r7]
	if(ratio > 1) ratio = 1;
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <_ZN5Motor8setRatioEd+0x80>)
 800101a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800101e:	f7ff fd3f 	bl	8000aa0 <__aeabi_dcmpgt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <_ZN5Motor8setRatioEd+0x2c>
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	4c16      	ldr	r4, [pc, #88]	; (8001088 <_ZN5Motor8setRatioEd+0x80>)
 800102e:	e9c7 3400 	strd	r3, r4, [r7]
 8001032:	e00e      	b.n	8001052 <_ZN5Motor8setRatioEd+0x4a>
	else if(ratio < -1) ratio = -1;
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <_ZN5Motor8setRatioEd+0x84>)
 800103a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800103e:	f7ff fd11 	bl	8000a64 <__aeabi_dcmplt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <_ZN5Motor8setRatioEd+0x4a>
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	4c0f      	ldr	r4, [pc, #60]	; (800108c <_ZN5Motor8setRatioEd+0x84>)
 800104e:	e9c7 3400 	strd	r3, r4, [r7]

	temp_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * ratio);
 8001052:	a30b      	add	r3, pc, #44	; (adr r3, 8001080 <_ZN5Motor8setRatioEd+0x78>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800105c:	f7ff fa90 	bl	8000580 <__aeabi_dmul>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4618      	mov	r0, r3
 8001066:	4621      	mov	r1, r4
 8001068:	f7ff fd24 	bl	8000ab4 <__aeabi_d2iz>
 800106c:	4603      	mov	r3, r0
 800106e:	b21a      	sxth	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	801a      	strh	r2, [r3, #0]

}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	f3af 8000 	nop.w
 8001080:	00000000 	.word	0x00000000
 8001084:	409c1c00 	.word	0x409c1c00
 8001088:	3ff00000 	.word	0x3ff00000
 800108c:	bff00000 	.word	0xbff00000

08001090 <HAL_TIM_PeriodElapsedCallback>:
    ITM_SendChar(*ptr++);
  }
  return len;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10e      	bne.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 80010a2:	f000 fda7 	bl	8001bf4 <cppFlip1ms>

		tim6_timer++;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010ae:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	dd02      	ble.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
	}

}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40001000 	.word	0x40001000
 80010cc:	200000e4 	.word	0x200000e4
 80010d0:	0001869f 	.word	0x0001869f

080010d4 <init>:

void init()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <init+0x14>)
 80010da:	f002 fdba 	bl	8003c52 <HAL_TIM_Base_Start_IT>
	cppInit();
 80010de:	f000 fd59 	bl	8001b94 <cppInit>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001e8 	.word	0x200001e8

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fdec 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f816 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fa4a 	bl	8001590 <MX_GPIO_Init>
  MX_DMA_Init();
 80010fc:	f000 fa28 	bl	8001550 <MX_DMA_Init>
  MX_TIM2_Init();
 8001100:	f000 f944 	bl	800138c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001104:	f000 f99a 	bl	800143c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001108:	f000 f87e 	bl	8001208 <MX_ADC1_Init>
  MX_SPI3_Init();
 800110c:	f000 f908 	bl	8001320 <MX_SPI3_Init>
  MX_I2C3_Init();
 8001110:	f000 f8d8 	bl	80012c4 <MX_I2C3_Init>
  MX_TIM6_Init();
 8001114:	f000 f9e6 	bl	80014e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init();
 8001118:	f7ff ffdc 	bl	80010d4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  cppLoop();
 800111c:	f000 fd48 	bl	8001bb0 <cppLoop>
 8001120:	e7fc      	b.n	800111c <main+0x30>
	...

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2234      	movs	r2, #52	; 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fc04 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <SystemClock_Config+0xdc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <SystemClock_Config+0xdc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <SystemClock_Config+0xdc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <SystemClock_Config+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <SystemClock_Config+0xe0>)
 800116e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <SystemClock_Config+0xe0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001194:	2308      	movs	r3, #8
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001198:	23b4      	movs	r3, #180	; 0xb4
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fa67 	bl	8003680 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011b8:	f000 fa6a 	bl	8001690 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011bc:	f001 ff6a 	bl	8003094 <HAL_PWREx_EnableOverDrive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011c6:	f000 fa63 	bl	8001690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2105      	movs	r1, #5
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 ffa3 	bl	8003134 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011f4:	f000 fa4c 	bl	8001690 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <MX_ADC1_Init+0xb4>)
 800121e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001226:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001230:	2201      	movs	r2, #1
 8001232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001236:	2201      	movs	r2, #1
 8001238:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001256:	2202      	movs	r2, #2
 8001258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_ADC1_Init+0xb0>)
 8001264:	2201      	movs	r2, #1
 8001266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800126a:	f000 fdc3 	bl	8001df4 <HAL_ADC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 fa0c 	bl	8001690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001278:	2305      	movs	r3, #5
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001280:	2307      	movs	r3, #7
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <MX_ADC1_Init+0xb0>)
 800128a:	f000 fdf7 	bl	8001e7c <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001294:	f000 f9fc 	bl	8001690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_ADC1_Init+0xb0>)
 80012a2:	f000 fdeb 	bl	8001e7c <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80012ac:	f000 f9f0 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000140 	.word	0x20000140
 80012bc:	40012000 	.word	0x40012000
 80012c0:	0f000001 	.word	0x0f000001

080012c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C3_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_I2C3_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C3_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_I2C3_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C3_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2C3_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2C3_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2C3_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2C3_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2C3_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2C3_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2C3_Init+0x50>)
 8001302:	f001 fd8f 	bl	8002e24 <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 f9c0 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000050 	.word	0x20000050
 8001318:	40005c00 	.word	0x40005c00
 800131c:	000186a0 	.word	0x000186a0

08001320 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_SPI3_Init+0x64>)
 8001326:	4a18      	ldr	r2, [pc, #96]	; (8001388 <MX_SPI3_Init+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_SPI3_Init+0x64>)
 800132c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001330:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_SPI3_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_SPI3_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_SPI3_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_SPI3_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_SPI3_Init+0x64>)
 800134c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001350:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_SPI3_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <MX_SPI3_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_SPI3_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MX_SPI3_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_SPI3_Init+0x64>)
 800136c:	220a      	movs	r2, #10
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_SPI3_Init+0x64>)
 8001372:	f002 fbdf 	bl	8003b34 <HAL_SPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800137c:	f000 f988 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000e8 	.word	0x200000e8
 8001388:	40003c00 	.word	0x40003c00

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_TIM2_Init+0xac>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_TIM2_Init+0xac>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM2_Init+0xac>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1799;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM2_Init+0xac>)
 80013c4:	f240 7207 	movw	r2, #1799	; 0x707
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_TIM2_Init+0xac>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_TIM2_Init+0xac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM2_Init+0xac>)
 80013d8:	f002 fc5f 	bl	8003c9a <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013e2:	f000 f955 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <MX_TIM2_Init+0xac>)
 80013f6:	f003 f9ef 	bl	80047d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001400:	f000 f946 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM2_Init+0xac>)
 800141c:	f002 fe78 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001426:	f000 f933 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM2_Init+0xac>)
 800142c:	f000 fb26 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000228 	.word	0x20000228

0800143c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fa78 	bl	8004940 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <MX_TIM4_Init+0xa0>)
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <MX_TIM4_Init+0xa4>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_TIM4_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM4_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_TIM4_Init+0xa0>)
 800146c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM4_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM4_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800147e:	2303      	movs	r3, #3
 8001480:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM4_Init+0xa0>)
 80014aa:	f002 fc5f 	bl	8003d6c <HAL_TIM_Encoder_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f000 f8ec 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM4_Init+0xa0>)
 80014c6:	f003 f987 	bl	80047d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014d0:	f000 f8de 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	; 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000a4 	.word	0x200000a4
 80014e0:	40000800 	.word	0x40000800

080014e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_TIM6_Init+0x64>)
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_TIM6_Init+0x68>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_TIM6_Init+0x64>)
 80014fa:	2259      	movs	r2, #89	; 0x59
 80014fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_TIM6_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_TIM6_Init+0x64>)
 8001506:	f240 32e7 	movw	r2, #999	; 0x3e7
 800150a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM6_Init+0x64>)
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM6_Init+0x64>)
 8001514:	f002 fb72 	bl	8003bfc <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800151e:	f000 f8b7 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_TIM6_Init+0x64>)
 8001530:	f003 f952 	bl	80047d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800153a:	f000 f8a9 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001e8 	.word	0x200001e8
 800154c:	40001000 	.word	0x40001000

08001550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_DMA_Init+0x3c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <MX_DMA_Init+0x3c>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_DMA_Init+0x3c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2038      	movs	r0, #56	; 0x38
 8001578:	f000 ff89 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800157c:	2038      	movs	r0, #56	; 0x38
 800157e:	f000 ffa2 	bl	80024c6 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a35      	ldr	r2, [pc, #212]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b33      	ldr	r3, [pc, #204]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_GPIO_Init+0xf4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_GPIO_Init+0xf4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a20      	ldr	r2, [pc, #128]	; (8001684 <MX_GPIO_Init+0xf4>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_GPIO_Init+0xf4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2108      	movs	r1, #8
 800161a:	481b      	ldr	r0, [pc, #108]	; (8001688 <MX_GPIO_Init+0xf8>)
 800161c:	f001 fbe8 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2120      	movs	r1, #32
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <MX_GPIO_Init+0xfc>)
 8001626:	f001 fbe3 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 800162a:	2308      	movs	r3, #8
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_GPIO_Init+0xf8>)
 8001642:	f001 fa43 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Pin SWB12_Pin */
  GPIO_InitStruct.Pin = SW_Pin|SWB12_Pin;
 8001646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_GPIO_Init+0xfc>)
 800165c:	f001 fa36 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001660:	2320      	movs	r3, #32
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_GPIO_Init+0xfc>)
 8001678:	f001 fa28 	bl	8002acc <HAL_GPIO_Init>

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001696:	e7fe      	b.n	8001696 <Error_Handler+0x6>

08001698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <HAL_ADC_MspInit+0xdc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d157      	bne.n	80017ba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_ADC_MspInit+0xe0>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <HAL_ADC_MspInit+0xe0>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_ADC_MspInit+0xe0>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_ADC_MspInit+0xe0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <HAL_ADC_MspInit+0xe0>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_ADC_MspInit+0xe0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MOTOR_CURRENT_Pin|ADC__Pin;
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	2303      	movs	r3, #3
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	481d      	ldr	r0, [pc, #116]	; (80017cc <HAL_ADC_MspInit+0xe4>)
 8001756:	f001 f9b9 	bl	8002acc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_ADC_MspInit+0xec>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 8001774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001778:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 800177c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001780:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 8001784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001788:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 800178c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001790:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 80017a0:	f000 feac 	bl	80024fc <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80017aa:	f7ff ff71 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_ADC_MspInit+0xe8>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012000 	.word	0x40012000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	20000188 	.word	0x20000188
 80017d4:	40026410 	.word	0x40026410

080017d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_I2C_MspInit+0xc4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d14b      	bne.n	8001892 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001838:	2312      	movs	r3, #18
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183c:	2301      	movs	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001844:	2304      	movs	r3, #4
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <HAL_I2C_MspInit+0xcc>)
 8001850:	f001 f93c 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185a:	2312      	movs	r3, #18
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185e:	2301      	movs	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001866:	2304      	movs	r3, #4
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <HAL_I2C_MspInit+0xd0>)
 8001872:	f001 f92b 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 8001880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_I2C_MspInit+0xc8>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40005c00 	.word	0x40005c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a21      	ldr	r2, [pc, #132]	; (8001950 <HAL_SPI_MspInit+0xa4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d13c      	bne.n	8001948 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_SPI_MspInit+0xa8>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_SPI_MspInit+0xa8>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_SPI_MspInit+0xa8>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_SPI_MspInit+0xa8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a18      	ldr	r2, [pc, #96]	; (8001954 <HAL_SPI_MspInit+0xa8>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_SPI_MspInit+0xa8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001906:	2302      	movs	r3, #2
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001916:	2305      	movs	r3, #5
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <HAL_SPI_MspInit+0xac>)
 8001922:	f001 f8d3 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001926:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001938:	2306      	movs	r3, #6
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_SPI_MspInit+0xac>)
 8001944:	f001 f8c2 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40003c00 	.word	0x40003c00
 8001954:	40023800 	.word	0x40023800
 8001958:	40020800 	.word	0x40020800

0800195c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d10d      	bne.n	800198a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_TIM_Encoder_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12b      	bne.n	8001a16 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x88>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x88>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x88>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a06:	2302      	movs	r3, #2
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a12:	f001 f85b 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400

08001a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_TIM_Base_MspInit+0x48>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d115      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_TIM_Base_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_TIM_Base_MspInit+0x4c>)
 8001a48:	f043 0310 	orr.w	r3, r3, #16
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2036      	movs	r0, #54	; 0x36
 8001a60:	f000 fd15 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a64:	2036      	movs	r0, #54	; 0x36
 8001a66:	f000 fd2e 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40001000 	.word	0x40001000
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d11d      	bne.n	8001ada <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8001aba:	2302      	movs	r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001ad6:	f000 fff9 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 f91a 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM6_DAC_IRQHandler+0x10>)
 8001b46:	f002 f9da 	bl	8003efe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200001e8 	.word	0x200001e8

08001b54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA2_Stream0_IRQHandler+0x10>)
 8001b5a:	f000 fd7d 	bl	8002658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000188 	.word	0x20000188

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <SystemInit+0x28>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <SystemInit+0x28>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SystemInit+0x28>)
 8001b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b82:	609a      	str	r2, [r3, #8]
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <cppInit>:
Motor motor;
Encoder encoder;

double total_cnt;

void cppInit(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	motor.init();
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <cppInit+0x14>)
 8001b9a:	f7ff f9fb 	bl	8000f94 <_ZN5Motor4initEv>
	encoder.init();
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <cppInit+0x18>)
 8001ba0:	f7ff f950 	bl	8000e44 <_ZN7Encoder4initEv>

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000002c 	.word	0x2000002c
 8001bac:	20000030 	.word	0x20000030

08001bb0 <cppLoop>:
void cppLoop(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	motor.setRatio(0.3);
 8001bb4:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001be0 <cppLoop+0x30>
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <cppLoop+0x40>)
 8001bba:	f7ff fa25 	bl	8001008 <_ZN5Motor8setRatioEd>
	HAL_Delay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc2:	f000 f8f5 	bl	8001db0 <HAL_Delay>
	motor.setRatio(-0.3);
 8001bc6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001be8 <cppLoop+0x38>
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <cppLoop+0x40>)
 8001bcc:	f7ff fa1c 	bl	8001008 <_ZN5Motor8setRatioEd>
	HAL_Delay(1000);
 8001bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd4:	f000 f8ec 	bl	8001db0 <HAL_Delay>

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	f3af 8000 	nop.w
 8001be0:	33333333 	.word	0x33333333
 8001be4:	3fd33333 	.word	0x3fd33333
 8001be8:	33333333 	.word	0x33333333
 8001bec:	bfd33333 	.word	0xbfd33333
 8001bf0:	2000002c 	.word	0x2000002c

08001bf4 <cppFlip1ms>:

void cppFlip1ms(void){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	motor.motorCtrl();
 8001bf8:	480a      	ldr	r0, [pc, #40]	; (8001c24 <cppFlip1ms+0x30>)
 8001bfa:	f7ff f9d9 	bl	8000fb0 <_ZN5Motor9motorCtrlEv>

	encoder.updateCnt();
 8001bfe:	480a      	ldr	r0, [pc, #40]	; (8001c28 <cppFlip1ms+0x34>)
 8001c00:	f7ff f94a 	bl	8000e98 <_ZN7Encoder9updateCntEv>
	total_cnt = encoder.getAngle();
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <cppFlip1ms+0x34>)
 8001c06:	f7ff f9a5 	bl	8000f54 <_ZN7Encoder8getAngleEv>
 8001c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c0e:	eef0 7a60 	vmov.f32	s15, s1
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <cppFlip1ms+0x38>)
 8001c14:	ed83 7b00 	vstr	d7, [r3]

	encoder.clearCnt();
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <cppFlip1ms+0x34>)
 8001c1a:	f7ff f985 	bl	8000f28 <_ZN7Encoder8clearCntEv>

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000002c 	.word	0x2000002c
 8001c28:	20000030 	.word	0x20000030
 8001c2c:	20000048 	.word	0x20000048

08001c30 <_Z41__static_initialization_and_destruction_0ii>:
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10a      	bne.n	8001c56 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d105      	bne.n	8001c56 <_Z41__static_initialization_and_destruction_0ii+0x26>
Motor motor;
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001c4c:	f7ff f993 	bl	8000f76 <_ZN5MotorC1Ev>
Encoder encoder;
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001c52:	f7ff f8d7 	bl	8000e04 <_ZN7EncoderC1Ev>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000002c 	.word	0x2000002c
 8001c64:	20000030 	.word	0x20000030

08001c68 <_GLOBAL__sub_I_motor>:
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff ffdd 	bl	8001c30 <_Z41__static_initialization_and_destruction_0ii>
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c7e:	e003      	b.n	8001c88 <LoopCopyDataInit>

08001c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c86:	3104      	adds	r1, #4

08001c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c90:	d3f6      	bcc.n	8001c80 <CopyDataInit>
  ldr  r2, =_sbss
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c94:	e002      	b.n	8001c9c <LoopFillZerobss>

08001c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c98:	f842 3b04 	str.w	r3, [r2], #4

08001c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca0:	d3f9      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ca2:	f7ff ff61 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f002 fe27 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff fa1f 	bl	80010ec <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cb4:	0800499c 	.word	0x0800499c
  ldr  r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cbc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001cc0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001cc4:	2000026c 	.word	0x2000026c

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_Init+0x40>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_Init+0x40>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_Init+0x40>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f000 fbbf 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 f808 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d00:	f7ff fcca 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x54>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_InitTick+0x58>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fbd7 	bl	80024e2 <HAL_SYSTICK_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00e      	b.n	8001d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d80a      	bhi.n	8001d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d44:	2200      	movs	r2, #0
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f000 fb9f 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d50:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <HAL_InitTick+0x5c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20000268 	.word	0x20000268

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000268 	.word	0x20000268

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d005      	beq.n	8001dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_Delay+0x40>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd6:	bf00      	nop
 8001dd8:	f7ff ffde 	bl	8001d98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8f7      	bhi.n	8001dd8 <HAL_Delay+0x28>
  {
  }
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e033      	b.n	8001e72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fc68 	bl	80016e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e3a:	f023 0302 	bic.w	r3, r3, #2
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f94a 	bl	80020e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
 8001e62:	e001      	b.n	8001e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1c>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e113      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x244>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d925      	bls.n	8001ef4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4403      	add	r3, r0
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	e022      	b.n	8001f3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6919      	ldr	r1, [r3, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4403      	add	r3, r0
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d824      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b05      	subs	r3, #5
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b05      	subs	r3, #5
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8a:	e04c      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d824      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b23      	subs	r3, #35	; 0x23
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b23      	subs	r3, #35	; 0x23
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e023      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b41      	subs	r3, #65	; 0x41
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b41      	subs	r3, #65	; 0x41
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_ADC_ConfigChannel+0x250>)
 8002028:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_ADC_ConfigChannel+0x254>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10f      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1d8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b12      	cmp	r3, #18
 800203a:	d10b      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_ADC_ConfigChannel+0x254>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12b      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_ADC_ConfigChannel+0x258>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x1f4>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b11      	cmp	r3, #17
 800206e:	d122      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_ADC_ConfigChannel+0x258>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x260>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	0c9a      	lsrs	r2, r3, #18
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40012300 	.word	0x40012300
 80020d0:	40012000 	.word	0x40012000
 80020d4:	10000012 	.word	0x10000012
 80020d8:	20000000 	.word	0x20000000
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e8:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <ADC_Init+0x1f0>)
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <ADC_Init+0x1f4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
 80021f8:	005a      	lsls	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800222a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	3b01      	subs	r3, #1
 8002238:	035a      	lsls	r2, r3, #13
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	e007      	b.n	8002254 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	3b01      	subs	r3, #1
 8002270:	051a      	lsls	r2, r3, #20
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002296:	025a      	lsls	r2, r3, #9
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	029a      	lsls	r2, r3, #10
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40012300 	.word	0x40012300
 80022d4:	0f000001 	.word	0x0f000001

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff29 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff3e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff31 	bl	800233c <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fc46 	bl	8001d98 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e099      	b.n	800264c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002538:	e00f      	b.n	800255a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800253a:	f7ff fc2d 	bl	8001d98 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b05      	cmp	r3, #5
 8002546:	d908      	bls.n	800255a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e078      	b.n	800264c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e8      	bne.n	800253a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <HAL_DMA_Init+0x158>)
 8002574:	4013      	ands	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4313      	orrs	r3, r2
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d117      	bne.n	800261e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f9e9 	bl	80029d8 <DMA_CheckFifoParam>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800261a:	2301      	movs	r3, #1
 800261c:	e016      	b.n	800264c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f9a0 	bl	800296c <DMA_CalcBaseAndBitshift>
 800262c:	4603      	mov	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	223f      	movs	r2, #63	; 0x3f
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	f010803f 	.word	0xf010803f

08002658 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002664:	4b92      	ldr	r3, [pc, #584]	; (80028b0 <HAL_DMA_IRQHandler+0x258>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a92      	ldr	r2, [pc, #584]	; (80028b4 <HAL_DMA_IRQHandler+0x25c>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a9b      	lsrs	r3, r3, #10
 8002670:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2208      	movs	r2, #8
 8002684:	409a      	lsls	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01a      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2208      	movs	r2, #8
 80026b2:	409a      	lsls	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2201      	movs	r2, #1
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2204      	movs	r2, #4
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2204      	movs	r2, #4
 800271e:	409a      	lsls	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0204 	orr.w	r2, r3, #4
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2210      	movs	r2, #16
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d043      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03c      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2210      	movs	r2, #16
 8002754:	409a      	lsls	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d018      	beq.n	800279a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d108      	bne.n	8002788 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d024      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
 8002786:	e01f      	b.n	80027c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
 8002798:	e016      	b.n	80027c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0208 	bic.w	r2, r2, #8
 80027b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2220      	movs	r2, #32
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 808e 	beq.w	80028f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8086 	beq.w	80028f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2220      	movs	r2, #32
 80027f0:	409a      	lsls	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d136      	bne.n	8002870 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0216 	bic.w	r2, r2, #22
 8002810:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002820:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <HAL_DMA_IRQHandler+0x1da>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0208 	bic.w	r2, r2, #8
 8002840:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	223f      	movs	r2, #63	; 0x3f
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	2b00      	cmp	r3, #0
 8002864:	d07d      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
        }
        return;
 800286e:	e078      	b.n	8002962 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	2b00      	cmp	r3, #0
 8002892:	d030      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
 800289c:	e02b      	b.n	80028f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d027      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
 80028ae:	e022      	b.n	80028f6 <HAL_DMA_IRQHandler+0x29e>
 80028b0:	20000000 	.word	0x20000000
 80028b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0210 	bic.w	r2, r2, #16
 80028d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d032      	beq.n	8002964 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d022      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3301      	adds	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	429a      	cmp	r2, r3
 800292c:	d307      	bcc.n	800293e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f2      	bne.n	8002922 <HAL_DMA_IRQHandler+0x2ca>
 800293c:	e000      	b.n	8002940 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800293e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e000      	b.n	8002964 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002962:	bf00      	nop
    }
  }
}
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop

0800296c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b10      	subs	r3, #16
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <DMA_CalcBaseAndBitshift+0x64>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d909      	bls.n	80029ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
 80029ac:	e007      	b.n	80029be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	08004980 	.word	0x08004980

080029d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d855      	bhi.n	8002aa4 <DMA_CheckFifoParam+0xcc>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x28>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a23 	.word	0x08002a23
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d045      	beq.n	8002aa8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e042      	b.n	8002aa8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2a:	d13f      	bne.n	8002aac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e03c      	b.n	8002aac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d121      	bne.n	8002a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d836      	bhi.n	8002ab0 <DMA_CheckFifoParam+0xd8>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <DMA_CheckFifoParam+0x70>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a5f 	.word	0x08002a5f
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	08002a71 	.word	0x08002a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e02f      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e021      	b.n	8002ab4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a78:	d11e      	bne.n	8002ab8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7e:	e01b      	b.n	8002ab8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <DMA_CheckFifoParam+0xb4>
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d003      	beq.n	8002a92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a8a:	e018      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e015      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa2:	e00b      	b.n	8002abc <DMA_CheckFifoParam+0xe4>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e00a      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e008      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aac:	bf00      	nop
 8002aae:	e006      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab0:	bf00      	nop
 8002ab2:	e004      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;   
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002abc:	bf00      	nop
    }
  } 
  
  return status; 
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e165      	b.n	8002db4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 8154 	bne.w	8002dae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d00b      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d130      	bne.n	8002b88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0201 	and.w	r2, r3, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0xfc>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80ae 	beq.w	8002dae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <HAL_GPIO_Init+0x2fc>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <HAL_GPIO_Init+0x2fc>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HAL_GPIO_Init+0x2fc>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6e:	4a57      	ldr	r2, [pc, #348]	; (8002dcc <HAL_GPIO_Init+0x300>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4e      	ldr	r2, [pc, #312]	; (8002dd0 <HAL_GPIO_Init+0x304>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_GPIO_Init+0x308>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4c      	ldr	r2, [pc, #304]	; (8002dd8 <HAL_GPIO_Init+0x30c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <HAL_GPIO_Init+0x310>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	; (8002de0 <HAL_GPIO_Init+0x314>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x20a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_GPIO_Init+0x318>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x206>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_GPIO_Init+0x31c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x202>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x21c>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf8:	4934      	ldr	r1, [pc, #208]	; (8002dcc <HAL_GPIO_Init+0x300>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2a:	4a30      	ldr	r2, [pc, #192]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d30:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d54:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da8:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_GPIO_Init+0x320>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f ae96 	bls.w	8002ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3724      	adds	r7, #36	; 0x24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e11f      	b.n	8003076 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fcc4 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e88:	f000 fa46 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a7b      	ldr	r2, [pc, #492]	; (8003080 <HAL_I2C_Init+0x25c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d807      	bhi.n	8002ea8 <HAL_I2C_Init+0x84>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a7a      	ldr	r2, [pc, #488]	; (8003084 <HAL_I2C_Init+0x260>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e006      	b.n	8002eb6 <HAL_I2C_Init+0x92>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a77      	ldr	r2, [pc, #476]	; (8003088 <HAL_I2C_Init+0x264>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0db      	b.n	8003076 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a72      	ldr	r2, [pc, #456]	; (800308c <HAL_I2C_Init+0x268>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0c9b      	lsrs	r3, r3, #18
 8002ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a64      	ldr	r2, [pc, #400]	; (8003080 <HAL_I2C_Init+0x25c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d802      	bhi.n	8002ef8 <HAL_I2C_Init+0xd4>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	e009      	b.n	8002f0c <HAL_I2C_Init+0xe8>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	4a63      	ldr	r2, [pc, #396]	; (8003090 <HAL_I2C_Init+0x26c>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4956      	ldr	r1, [pc, #344]	; (8003080 <HAL_I2C_Init+0x25c>)
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	d80d      	bhi.n	8002f48 <HAL_I2C_Init+0x124>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e59      	subs	r1, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	bf38      	it	cc
 8002f44:	2304      	movcc	r3, #4
 8002f46:	e04f      	b.n	8002fe8 <HAL_I2C_Init+0x1c4>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HAL_I2C_Init+0x150>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e012      	b.n	8002f9a <HAL_I2C_Init+0x176>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x17e>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e022      	b.n	8002fe8 <HAL_I2C_Init+0x1c4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_I2C_Init+0x1a4>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e58      	subs	r0, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	440b      	add	r3, r1
 8002fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	e00f      	b.n	8002fe8 <HAL_I2C_Init+0x1c4>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	0099      	lsls	r1, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	6809      	ldr	r1, [r1, #0]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6911      	ldr	r1, [r2, #16]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	4311      	orrs	r1, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	000186a0 	.word	0x000186a0
 8003084:	001e847f 	.word	0x001e847f
 8003088:	003d08ff 	.word	0x003d08ff
 800308c:	431bde83 	.word	0x431bde83
 8003090:	10624dd3 	.word	0x10624dd3

08003094 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_PWREx_EnableOverDrive+0x90>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_PWREx_EnableOverDrive+0x90>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_PWREx_EnableOverDrive+0x90>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_PWREx_EnableOverDrive+0x94>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c0:	f7fe fe6a 	bl	8001d98 <HAL_GetTick>
 80030c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c6:	e009      	b.n	80030dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c8:	f7fe fe66 	bl	8001d98 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d6:	d901      	bls.n	80030dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e01f      	b.n	800311c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_PWREx_EnableOverDrive+0x98>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d1ee      	bne.n	80030c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7fe fe52 	bl	8001d98 <HAL_GetTick>
 80030f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f6:	e009      	b.n	800310c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030f8:	f7fe fe4e 	bl	8001d98 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003106:	d901      	bls.n	800310c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e007      	b.n	800311c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_PWREx_EnableOverDrive+0x98>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003118:	d1ee      	bne.n	80030f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	420e0040 	.word	0x420e0040
 800312c:	40007000 	.word	0x40007000
 8003130:	420e0044 	.word	0x420e0044

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0cc      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d90c      	bls.n	8003170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b65      	ldr	r3, [pc, #404]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b8      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003188:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	494d      	ldr	r1, [pc, #308]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d044      	beq.n	8003254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d119      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e067      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4934      	ldr	r1, [pc, #208]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7fe fdb8 	bl	8001d98 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fe fdb4 	bl	8001d98 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e04f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d20c      	bcs.n	800327c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e032      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4916      	ldr	r1, [pc, #88]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ba:	f000 f841 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 80032be:	4601      	mov	r1, r0
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	fa21 f303 	lsr.w	r3, r1, r3
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fd18 	bl	8001d10 <HAL_InitTick>

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08004968 	.word	0x08004968
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4601      	mov	r1, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4a03      	ldr	r2, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	08004978 	.word	0x08004978

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335a:	4bc6      	ldr	r3, [pc, #792]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b0c      	cmp	r3, #12
 8003364:	f200 817e 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x324>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <HAL_RCC_GetSysClockFreq+0x30>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033a5 	.word	0x080033a5
 8003374:	08003665 	.word	0x08003665
 8003378:	08003665 	.word	0x08003665
 800337c:	08003665 	.word	0x08003665
 8003380:	080033ab 	.word	0x080033ab
 8003384:	08003665 	.word	0x08003665
 8003388:	08003665 	.word	0x08003665
 800338c:	08003665 	.word	0x08003665
 8003390:	080033b1 	.word	0x080033b1
 8003394:	08003665 	.word	0x08003665
 8003398:	08003665 	.word	0x08003665
 800339c:	08003665 	.word	0x08003665
 80033a0:	0800350d 	.word	0x0800350d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4bb4      	ldr	r3, [pc, #720]	; (8003678 <HAL_RCC_GetSysClockFreq+0x338>)
 80033a6:	613b      	str	r3, [r7, #16]
       break;
 80033a8:	e15f      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033aa:	4bb4      	ldr	r3, [pc, #720]	; (800367c <HAL_RCC_GetSysClockFreq+0x33c>)
 80033ac:	613b      	str	r3, [r7, #16]
      break;
 80033ae:	e15c      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b0:	4bb0      	ldr	r3, [pc, #704]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ba:	4bae      	ldr	r3, [pc, #696]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04a      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4bab      	ldr	r3, [pc, #684]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	f04f 0400 	mov.w	r4, #0
 80033d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	ea03 0501 	and.w	r5, r3, r1
 80033dc:	ea04 0602 	and.w	r6, r4, r2
 80033e0:	4629      	mov	r1, r5
 80033e2:	4632      	mov	r2, r6
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0154      	lsls	r4, r2, #5
 80033ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033f2:	014b      	lsls	r3, r1, #5
 80033f4:	4619      	mov	r1, r3
 80033f6:	4622      	mov	r2, r4
 80033f8:	1b49      	subs	r1, r1, r5
 80033fa:	eb62 0206 	sbc.w	r2, r2, r6
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	0194      	lsls	r4, r2, #6
 8003408:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800340c:	018b      	lsls	r3, r1, #6
 800340e:	1a5b      	subs	r3, r3, r1
 8003410:	eb64 0402 	sbc.w	r4, r4, r2
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	00e2      	lsls	r2, r4, #3
 800341e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003422:	00d9      	lsls	r1, r3, #3
 8003424:	460b      	mov	r3, r1
 8003426:	4614      	mov	r4, r2
 8003428:	195b      	adds	r3, r3, r5
 800342a:	eb44 0406 	adc.w	r4, r4, r6
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	0262      	lsls	r2, r4, #9
 8003438:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800343c:	0259      	lsls	r1, r3, #9
 800343e:	460b      	mov	r3, r1
 8003440:	4614      	mov	r4, r2
 8003442:	4618      	mov	r0, r3
 8003444:	4621      	mov	r1, r4
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f04f 0400 	mov.w	r4, #0
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	f7fd fb58 	bl	8000b04 <__aeabi_uldivmod>
 8003454:	4603      	mov	r3, r0
 8003456:	460c      	mov	r4, r1
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e049      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345c:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	f04f 0400 	mov.w	r4, #0
 8003466:	f240 11ff 	movw	r1, #511	; 0x1ff
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	ea03 0501 	and.w	r5, r3, r1
 8003472:	ea04 0602 	and.w	r6, r4, r2
 8003476:	4629      	mov	r1, r5
 8003478:	4632      	mov	r2, r6
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	f04f 0400 	mov.w	r4, #0
 8003482:	0154      	lsls	r4, r2, #5
 8003484:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003488:	014b      	lsls	r3, r1, #5
 800348a:	4619      	mov	r1, r3
 800348c:	4622      	mov	r2, r4
 800348e:	1b49      	subs	r1, r1, r5
 8003490:	eb62 0206 	sbc.w	r2, r2, r6
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	0194      	lsls	r4, r2, #6
 800349e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034a2:	018b      	lsls	r3, r1, #6
 80034a4:	1a5b      	subs	r3, r3, r1
 80034a6:	eb64 0402 	sbc.w	r4, r4, r2
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	00e2      	lsls	r2, r4, #3
 80034b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034b8:	00d9      	lsls	r1, r3, #3
 80034ba:	460b      	mov	r3, r1
 80034bc:	4614      	mov	r4, r2
 80034be:	195b      	adds	r3, r3, r5
 80034c0:	eb44 0406 	adc.w	r4, r4, r6
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	02a2      	lsls	r2, r4, #10
 80034ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034d2:	0299      	lsls	r1, r3, #10
 80034d4:	460b      	mov	r3, r1
 80034d6:	4614      	mov	r4, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	4621      	mov	r1, r4
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	461a      	mov	r2, r3
 80034e4:	4623      	mov	r3, r4
 80034e6:	f7fd fb0d 	bl	8000b04 <__aeabi_uldivmod>
 80034ea:	4603      	mov	r3, r0
 80034ec:	460c      	mov	r4, r1
 80034ee:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f0:	4b60      	ldr	r3, [pc, #384]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	3301      	adds	r3, #1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	613b      	str	r3, [r7, #16]
      break;
 800350a:	e0ae      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003514:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003516:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d04a      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	ea03 0501 	and.w	r5, r3, r1
 8003538:	ea04 0602 	and.w	r6, r4, r2
 800353c:	4629      	mov	r1, r5
 800353e:	4632      	mov	r2, r6
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	f04f 0400 	mov.w	r4, #0
 8003548:	0154      	lsls	r4, r2, #5
 800354a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800354e:	014b      	lsls	r3, r1, #5
 8003550:	4619      	mov	r1, r3
 8003552:	4622      	mov	r2, r4
 8003554:	1b49      	subs	r1, r1, r5
 8003556:	eb62 0206 	sbc.w	r2, r2, r6
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f04f 0400 	mov.w	r4, #0
 8003562:	0194      	lsls	r4, r2, #6
 8003564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003568:	018b      	lsls	r3, r1, #6
 800356a:	1a5b      	subs	r3, r3, r1
 800356c:	eb64 0402 	sbc.w	r4, r4, r2
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	00e2      	lsls	r2, r4, #3
 800357a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800357e:	00d9      	lsls	r1, r3, #3
 8003580:	460b      	mov	r3, r1
 8003582:	4614      	mov	r4, r2
 8003584:	195b      	adds	r3, r3, r5
 8003586:	eb44 0406 	adc.w	r4, r4, r6
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	0262      	lsls	r2, r4, #9
 8003594:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003598:	0259      	lsls	r1, r3, #9
 800359a:	460b      	mov	r3, r1
 800359c:	4614      	mov	r4, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	4621      	mov	r1, r4
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4623      	mov	r3, r4
 80035ac:	f7fd faaa 	bl	8000b04 <__aeabi_uldivmod>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e049      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	f04f 0400 	mov.w	r4, #0
 80035c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	ea03 0501 	and.w	r5, r3, r1
 80035ce:	ea04 0602 	and.w	r6, r4, r2
 80035d2:	4629      	mov	r1, r5
 80035d4:	4632      	mov	r2, r6
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	f04f 0400 	mov.w	r4, #0
 80035de:	0154      	lsls	r4, r2, #5
 80035e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035e4:	014b      	lsls	r3, r1, #5
 80035e6:	4619      	mov	r1, r3
 80035e8:	4622      	mov	r2, r4
 80035ea:	1b49      	subs	r1, r1, r5
 80035ec:	eb62 0206 	sbc.w	r2, r2, r6
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	f04f 0400 	mov.w	r4, #0
 80035f8:	0194      	lsls	r4, r2, #6
 80035fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035fe:	018b      	lsls	r3, r1, #6
 8003600:	1a5b      	subs	r3, r3, r1
 8003602:	eb64 0402 	sbc.w	r4, r4, r2
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	00e2      	lsls	r2, r4, #3
 8003610:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003614:	00d9      	lsls	r1, r3, #3
 8003616:	460b      	mov	r3, r1
 8003618:	4614      	mov	r4, r2
 800361a:	195b      	adds	r3, r3, r5
 800361c:	eb44 0406 	adc.w	r4, r4, r6
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	02a2      	lsls	r2, r4, #10
 800362a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800362e:	0299      	lsls	r1, r3, #10
 8003630:	460b      	mov	r3, r1
 8003632:	4614      	mov	r4, r2
 8003634:	4618      	mov	r0, r3
 8003636:	4621      	mov	r1, r4
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f04f 0400 	mov.w	r4, #0
 800363e:	461a      	mov	r2, r3
 8003640:	4623      	mov	r3, r4
 8003642:	f7fd fa5f 	bl	8000b04 <__aeabi_uldivmod>
 8003646:	4603      	mov	r3, r0
 8003648:	460c      	mov	r4, r1
 800364a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_GetSysClockFreq+0x334>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0f1b      	lsrs	r3, r3, #28
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
      break;
 8003662:	e002      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_RCC_GetSysClockFreq+0x338>)
 8003666:	613b      	str	r3, [r7, #16]
      break;
 8003668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366a:	693b      	ldr	r3, [r7, #16]
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	007a1200 	.word	0x007a1200

08003680 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8083 	beq.w	80037a0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800369a:	4b95      	ldr	r3, [pc, #596]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d019      	beq.n	80036da <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036a6:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036b2:	4b8f      	ldr	r3, [pc, #572]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d00c      	beq.n	80036da <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c0:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d112      	bne.n	80036f2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036cc:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d05b      	beq.n	800379e <HAL_RCC_OscConfig+0x11e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d157      	bne.n	800379e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e216      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x8a>
 80036fc:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7b      	ldr	r2, [pc, #492]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e01d      	b.n	8003746 <HAL_RCC_OscConfig+0xc6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003712:	d10c      	bne.n	800372e <HAL_RCC_OscConfig+0xae>
 8003714:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a75      	ldr	r2, [pc, #468]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 800371a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a72      	ldr	r2, [pc, #456]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e00b      	b.n	8003746 <HAL_RCC_OscConfig+0xc6>
 800372e:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6f      	ldr	r2, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6c      	ldr	r2, [pc, #432]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe fb23 	bl	8001d98 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003756:	f7fe fb1f 	bl	8001d98 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b64      	cmp	r3, #100	; 0x64
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1db      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003768:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0xd6>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe fb0f 	bl	8001d98 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800377e:	f7fe fb0b 	bl	8001d98 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	; 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e1c7      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003790:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0xfe>
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d06f      	beq.n	800388c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ac:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d017      	beq.n	80037e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037b8:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d105      	bne.n	80037d0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037c4:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d0:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d11c      	bne.n	8003816 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037dc:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d116      	bne.n	8003816 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_OscConfig+0x180>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e18f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4938      	ldr	r1, [pc, #224]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003814:	e03a      	b.n	800388c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d020      	beq.n	8003860 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381e:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <HAL_RCC_OscConfig+0x274>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe fab8 	bl	8001d98 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382c:	f7fe fab4 	bl	8001d98 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e170      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
 800385e:	e015      	b.n	800388c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x274>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fe fa97 	bl	8001d98 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386e:	f7fe fa93 	bl	8001d98 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e14f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d037      	beq.n	8003908 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d016      	beq.n	80038ce <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x278>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe fa77 	bl	8001d98 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fe fa73 	bl	8001d98 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e12f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_OscConfig+0x270>)
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x22e>
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_OscConfig+0x278>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fa60 	bl	8001d98 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038da:	e00f      	b.n	80038fc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fa5c 	bl	8001d98 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d908      	bls.n	80038fc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e118      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470000 	.word	0x42470000
 80038f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	4b8a      	ldr	r3, [pc, #552]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e9      	bne.n	80038dc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8097 	beq.w	8003a44 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391a:	4b83      	ldr	r3, [pc, #524]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a7e      	ldr	r2, [pc, #504]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b79      	ldr	r3, [pc, #484]	; (8003b2c <HAL_RCC_OscConfig+0x4ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x4ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x4ac>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fe fa1b 	bl	8001d98 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fe fa17 	bl	8001d98 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e0d3      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_OscConfig+0x4ac>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x31a>
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x354>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x33c>
 80039a2:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a60      	ldr	r2, [pc, #384]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0x354>
 80039bc:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a59      	ldr	r2, [pc, #356]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe f9dc 	bl	8001d98 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe f9d8 	bl	8001d98 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e092      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RCC_OscConfig+0x364>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe f9c6 	bl	8001d98 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fe f9c2 	bl	8001d98 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e07c      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a26:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ee      	bne.n	8003a10 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d068      	beq.n	8003b1e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d060      	beq.n	8003b1a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d145      	bne.n	8003aec <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a60:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_RCC_OscConfig+0x4b0>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fe f997 	bl	8001d98 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe f993 	bl	8001d98 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e04f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	019b      	lsls	r3, r3, #6
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	061b      	lsls	r3, r3, #24
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	071b      	lsls	r3, r3, #28
 8003ab8:	491b      	ldr	r1, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCC_OscConfig+0x4b0>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe f968 	bl	8001d98 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe f964 	bl	8001d98 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e020      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x44c>
 8003aea:	e018      	b.n	8003b1e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_OscConfig+0x4b0>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe f951 	bl	8001d98 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe f94d 	bl	8001d98 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e009      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_OscConfig+0x4a8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x47a>
 8003b18:	e001      	b.n	8003b1e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42470060 	.word	0x42470060

08003b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e056      	b.n	8003bf4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fd fea3 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	ea42 0103 	orr.w	r1, r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	f003 0104 	and.w	r1, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01d      	b.n	8003c4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd ff02 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 fb56 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b06      	cmp	r3, #6
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e01d      	b.n	8003ce8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd fe4b 	bl	800195c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f000 fb07 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd42 	bl	800478c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <HAL_TIM_PWM_Start+0x74>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x2c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_TIM_PWM_Start+0x78>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_PWM_Start+0x30>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_TIM_PWM_Start+0x32>
 8003d20:	2300      	movs	r3, #0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d007      	beq.n	8003d58 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400

08003d6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e083      	b.n	8003e88 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd fe01 	bl	800199c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db0:	f023 0307 	bic.w	r3, r3, #7
 8003db4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fa93 	bl	80042ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e0c:	f023 030c 	bic.w	r3, r3, #12
 8003e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	011a      	lsls	r2, r3, #4
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	031b      	lsls	r3, r3, #12
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_TIM_Encoder_Start+0x16>
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d008      	beq.n	8003eb6 <HAL_TIM_Encoder_Start+0x26>
 8003ea4:	e00f      	b.n	8003ec6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fc6c 	bl	800478c <TIM_CCxChannelCmd>
      break;
 8003eb4:	e016      	b.n	8003ee4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fc64 	bl	800478c <TIM_CCxChannelCmd>
      break;
 8003ec4:	e00e      	b.n	8003ee4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fc5c 	bl	800478c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2104      	movs	r1, #4
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fc55 	bl	800478c <TIM_CCxChannelCmd>
      break;
 8003ee2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d122      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d11b      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f06f 0202 	mvn.w	r2, #2
 8003f2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f9b5 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003f46:	e005      	b.n	8003f54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f9a7 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9b8 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d122      	bne.n	8003fae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d11b      	bne.n	8003fae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f06f 0204 	mvn.w	r2, #4
 8003f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f98b 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003f9a:	e005      	b.n	8003fa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f97d 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f98e 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d122      	bne.n	8004002 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11b      	bne.n	8004002 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f06f 0208 	mvn.w	r2, #8
 8003fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f961 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003fee:	e005      	b.n	8003ffc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f953 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f964 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d122      	bne.n	8004056 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b10      	cmp	r3, #16
 800401c:	d11b      	bne.n	8004056 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f06f 0210 	mvn.w	r2, #16
 8004026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2208      	movs	r2, #8
 800402c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f937 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8004042:	e005      	b.n	8004050 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f929 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f93a 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10e      	bne.n	8004082 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0201 	mvn.w	r2, #1
 800407a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fd f807 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d10e      	bne.n	80040ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d107      	bne.n	80040ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fc1b 	bl	80048e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d10e      	bne.n	80040da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d107      	bne.n	80040da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8ff 	bl	80042d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d10e      	bne.n	8004106 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d107      	bne.n	8004106 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0220 	mvn.w	r2, #32
 80040fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fbe5 	bl	80048d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004126:	2302      	movs	r3, #2
 8004128:	e0b4      	b.n	8004294 <HAL_TIM_PWM_ConfigChannel+0x184>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	f200 809f 	bhi.w	8004280 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800417d 	.word	0x0800417d
 800414c:	08004281 	.word	0x08004281
 8004150:	08004281 	.word	0x08004281
 8004154:	08004281 	.word	0x08004281
 8004158:	080041bd 	.word	0x080041bd
 800415c:	08004281 	.word	0x08004281
 8004160:	08004281 	.word	0x08004281
 8004164:	08004281 	.word	0x08004281
 8004168:	080041ff 	.word	0x080041ff
 800416c:	08004281 	.word	0x08004281
 8004170:	08004281 	.word	0x08004281
 8004174:	08004281 	.word	0x08004281
 8004178:	0800423f 	.word	0x0800423f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f952 	bl	800442c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
      break;
 80041ba:	e062      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f9a2 	bl	800450c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e041      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f9f7 	bl	80045f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0208 	orr.w	r2, r2, #8
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0204 	bic.w	r2, r2, #4
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
      break;
 800423c:	e021      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa4b 	bl	80046e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	61da      	str	r2, [r3, #28]
      break;
 800427e:	e000      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004280:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a40      	ldr	r2, [pc, #256]	; (8004400 <TIM_Base_SetConfig+0x114>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3d      	ldr	r2, [pc, #244]	; (8004404 <TIM_Base_SetConfig+0x118>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <TIM_Base_SetConfig+0x11c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <TIM_Base_SetConfig+0x120>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <TIM_Base_SetConfig+0x124>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <TIM_Base_SetConfig+0x114>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02b      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d027      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <TIM_Base_SetConfig+0x118>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d023      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <TIM_Base_SetConfig+0x11c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01f      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <TIM_Base_SetConfig+0x120>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01b      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a29      	ldr	r2, [pc, #164]	; (8004410 <TIM_Base_SetConfig+0x124>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d017      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a28      	ldr	r2, [pc, #160]	; (8004414 <TIM_Base_SetConfig+0x128>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <TIM_Base_SetConfig+0x12c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00f      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a26      	ldr	r2, [pc, #152]	; (800441c <TIM_Base_SetConfig+0x130>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00b      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <TIM_Base_SetConfig+0x134>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <TIM_Base_SetConfig+0x138>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a23      	ldr	r2, [pc, #140]	; (8004428 <TIM_Base_SetConfig+0x13c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d108      	bne.n	80043b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <TIM_Base_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <TIM_Base_SetConfig+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800
 8004420:	40001800 	.word	0x40001800
 8004424:	40001c00 	.word	0x40001c00
 8004428:	40002000 	.word	0x40002000

0800442c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 0302 	bic.w	r3, r3, #2
 8004474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a20      	ldr	r2, [pc, #128]	; (8004504 <TIM_OC1_SetConfig+0xd8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC1_SetConfig+0x64>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <TIM_OC1_SetConfig+0xdc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10c      	bne.n	80044aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0308 	bic.w	r3, r3, #8
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a15      	ldr	r2, [pc, #84]	; (8004504 <TIM_OC1_SetConfig+0xd8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_OC1_SetConfig+0x8e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a14      	ldr	r2, [pc, #80]	; (8004508 <TIM_OC1_SetConfig+0xdc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400

0800450c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0210 	bic.w	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0320 	bic.w	r3, r3, #32
 8004556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <TIM_OC2_SetConfig+0xe4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC2_SetConfig+0x68>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <TIM_OC2_SetConfig+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10d      	bne.n	8004590 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <TIM_OC2_SetConfig+0xe4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_OC2_SetConfig+0x94>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <TIM_OC2_SetConfig+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d113      	bne.n	80045c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40010400 	.word	0x40010400

080045f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <TIM_OC3_SetConfig+0xe0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_OC3_SetConfig+0x66>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a20      	ldr	r2, [pc, #128]	; (80046dc <TIM_OC3_SetConfig+0xe4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10d      	bne.n	800467a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <TIM_OC3_SetConfig+0xe0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_OC3_SetConfig+0x92>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <TIM_OC3_SetConfig+0xe4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d113      	bne.n	80046b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010400 	.word	0x40010400

080046e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800472a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	031b      	lsls	r3, r3, #12
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <TIM_OC4_SetConfig+0xa4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC4_SetConfig+0x68>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <TIM_OC4_SetConfig+0xa8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d109      	bne.n	800475c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800474e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40010400 	.word	0x40010400

0800478c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2201      	movs	r2, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e05a      	b.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d022      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483c:	d01d      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d018      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1a      	ldr	r2, [pc, #104]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10c      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4313      	orrs	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40010000 	.word	0x40010000
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	40000c00 	.word	0x40000c00
 80048c4:	40010400 	.word	0x40010400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40001800 	.word	0x40001800

080048d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4e0d      	ldr	r6, [pc, #52]	; (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	; (8004934 <__libc_init_array+0x3c>)
 80048fe:	1ba4      	subs	r4, r4, r6
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2500      	movs	r5, #0
 8004904:	42a5      	cmp	r5, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4e0b      	ldr	r6, [pc, #44]	; (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	; (800493c <__libc_init_array+0x44>)
 800490c:	f000 f820 	bl	8004950 <_init>
 8004910:	1ba4      	subs	r4, r4, r6
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2500      	movs	r5, #0
 8004916:	42a5      	cmp	r5, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004920:	4798      	blx	r3
 8004922:	3501      	adds	r5, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800492a:	4798      	blx	r3
 800492c:	3501      	adds	r5, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	08004990 	.word	0x08004990
 8004934:	08004990 	.word	0x08004990
 8004938:	08004990 	.word	0x08004990
 800493c:	08004998 	.word	0x08004998

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
