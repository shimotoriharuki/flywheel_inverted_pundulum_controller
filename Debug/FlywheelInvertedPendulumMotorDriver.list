
FlywheelInvertedPendulumMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f4  080043f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043fc  080043fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08004414  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004414  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112e9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002483  00000000  00000000  00031325  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  000337a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000025be  00000000  00000000  00035888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d247  00000000  00000000  00037e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c73  00000000  00000000  0004508d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  00117d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080043bc 	.word	0x080043bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080043bc 	.word	0x080043bc

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_ddiv>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000462:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000466:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800046a:	bf1d      	ittte	ne
 800046c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000470:	ea94 0f0c 	teqne	r4, ip
 8000474:	ea95 0f0c 	teqne	r5, ip
 8000478:	f000 f8a7 	bleq	80005ca <__aeabi_ddiv+0x16e>
 800047c:	eba4 0405 	sub.w	r4, r4, r5
 8000480:	ea81 0e03 	eor.w	lr, r1, r3
 8000484:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000488:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800048c:	f000 8088 	beq.w	80005a0 <__aeabi_ddiv+0x144>
 8000490:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000494:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000498:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800049c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80004a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80004a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80004a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80004ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80004b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80004b4:	429d      	cmp	r5, r3
 80004b6:	bf08      	it	eq
 80004b8:	4296      	cmpeq	r6, r2
 80004ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80004be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80004c2:	d202      	bcs.n	80004ca <__aeabi_ddiv+0x6e>
 80004c4:	085b      	lsrs	r3, r3, #1
 80004c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80004ca:	1ab6      	subs	r6, r6, r2
 80004cc:	eb65 0503 	sbc.w	r5, r5, r3
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80004da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80004de:	ebb6 0e02 	subs.w	lr, r6, r2
 80004e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004e6:	bf22      	ittt	cs
 80004e8:	1ab6      	subcs	r6, r6, r2
 80004ea:	4675      	movcs	r5, lr
 80004ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004fe:	bf22      	ittt	cs
 8000500:	1ab6      	subcs	r6, r6, r2
 8000502:	4675      	movcs	r5, lr
 8000504:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000508:	085b      	lsrs	r3, r3, #1
 800050a:	ea4f 0232 	mov.w	r2, r2, rrx
 800050e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000512:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000516:	bf22      	ittt	cs
 8000518:	1ab6      	subcs	r6, r6, r2
 800051a:	4675      	movcs	r5, lr
 800051c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000520:	085b      	lsrs	r3, r3, #1
 8000522:	ea4f 0232 	mov.w	r2, r2, rrx
 8000526:	ebb6 0e02 	subs.w	lr, r6, r2
 800052a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800052e:	bf22      	ittt	cs
 8000530:	1ab6      	subcs	r6, r6, r2
 8000532:	4675      	movcs	r5, lr
 8000534:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000538:	ea55 0e06 	orrs.w	lr, r5, r6
 800053c:	d018      	beq.n	8000570 <__aeabi_ddiv+0x114>
 800053e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000542:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000546:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800054a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800054e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000552:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000556:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800055a:	d1c0      	bne.n	80004de <__aeabi_ddiv+0x82>
 800055c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000560:	d10b      	bne.n	800057a <__aeabi_ddiv+0x11e>
 8000562:	ea41 0100 	orr.w	r1, r1, r0
 8000566:	f04f 0000 	mov.w	r0, #0
 800056a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800056e:	e7b6      	b.n	80004de <__aeabi_ddiv+0x82>
 8000570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000574:	bf04      	itt	eq
 8000576:	4301      	orreq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057e:	bf88      	it	hi
 8000580:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000584:	f63f aeaf 	bhi.w	80002e6 <__aeabi_dmul+0xde>
 8000588:	ebb5 0c03 	subs.w	ip, r5, r3
 800058c:	bf04      	itt	eq
 800058e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80005a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80005a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	e690      	b.n	80002e6 <__aeabi_dmul+0xde>
 80005c4:	ea45 0e06 	orr.w	lr, r5, r6
 80005c8:	e68d      	b.n	80002e6 <__aeabi_dmul+0xde>
 80005ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80005ce:	ea94 0f0c 	teq	r4, ip
 80005d2:	bf08      	it	eq
 80005d4:	ea95 0f0c 	teqeq	r5, ip
 80005d8:	f43f af3b 	beq.w	8000452 <__aeabi_dmul+0x24a>
 80005dc:	ea94 0f0c 	teq	r4, ip
 80005e0:	d10a      	bne.n	80005f8 <__aeabi_ddiv+0x19c>
 80005e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e6:	f47f af34 	bne.w	8000452 <__aeabi_dmul+0x24a>
 80005ea:	ea95 0f0c 	teq	r5, ip
 80005ee:	f47f af25 	bne.w	800043c <__aeabi_dmul+0x234>
 80005f2:	4610      	mov	r0, r2
 80005f4:	4619      	mov	r1, r3
 80005f6:	e72c      	b.n	8000452 <__aeabi_dmul+0x24a>
 80005f8:	ea95 0f0c 	teq	r5, ip
 80005fc:	d106      	bne.n	800060c <__aeabi_ddiv+0x1b0>
 80005fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000602:	f43f aefd 	beq.w	8000400 <__aeabi_dmul+0x1f8>
 8000606:	4610      	mov	r0, r2
 8000608:	4619      	mov	r1, r3
 800060a:	e722      	b.n	8000452 <__aeabi_dmul+0x24a>
 800060c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000610:	bf18      	it	ne
 8000612:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000616:	f47f aec5 	bne.w	80003a4 <__aeabi_dmul+0x19c>
 800061a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800061e:	f47f af0d 	bne.w	800043c <__aeabi_dmul+0x234>
 8000622:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000626:	f47f aeeb 	bne.w	8000400 <__aeabi_dmul+0x1f8>
 800062a:	e712      	b.n	8000452 <__aeabi_dmul+0x24a>

0800062c <__gedf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpdf2+0x4>
 8000632:	bf00      	nop

08000634 <__ledf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpdf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpdf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800064c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000650:	bf18      	it	ne
 8000652:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000656:	d01b      	beq.n	8000690 <__cmpdf2+0x54>
 8000658:	b001      	add	sp, #4
 800065a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065e:	bf0c      	ite	eq
 8000660:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000664:	ea91 0f03 	teqne	r1, r3
 8000668:	bf02      	ittt	eq
 800066a:	ea90 0f02 	teqeq	r0, r2
 800066e:	2000      	moveq	r0, #0
 8000670:	4770      	bxeq	lr
 8000672:	f110 0f00 	cmn.w	r0, #0
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf58      	it	pl
 800067c:	4299      	cmppl	r1, r3
 800067e:	bf08      	it	eq
 8000680:	4290      	cmpeq	r0, r2
 8000682:	bf2c      	ite	cs
 8000684:	17d8      	asrcs	r0, r3, #31
 8000686:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800068a:	f040 0001 	orr.w	r0, r0, #1
 800068e:	4770      	bx	lr
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	d102      	bne.n	80006a0 <__cmpdf2+0x64>
 800069a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069e:	d107      	bne.n	80006b0 <__cmpdf2+0x74>
 80006a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a8:	d1d6      	bne.n	8000658 <__cmpdf2+0x1c>
 80006aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ae:	d0d3      	beq.n	8000658 <__cmpdf2+0x1c>
 80006b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_cdrcmple>:
 80006b8:	4684      	mov	ip, r0
 80006ba:	4610      	mov	r0, r2
 80006bc:	4662      	mov	r2, ip
 80006be:	468c      	mov	ip, r1
 80006c0:	4619      	mov	r1, r3
 80006c2:	4663      	mov	r3, ip
 80006c4:	e000      	b.n	80006c8 <__aeabi_cdcmpeq>
 80006c6:	bf00      	nop

080006c8 <__aeabi_cdcmpeq>:
 80006c8:	b501      	push	{r0, lr}
 80006ca:	f7ff ffb7 	bl	800063c <__cmpdf2>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	bf48      	it	mi
 80006d2:	f110 0f00 	cmnmi.w	r0, #0
 80006d6:	bd01      	pop	{r0, pc}

080006d8 <__aeabi_dcmpeq>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff fff4 	bl	80006c8 <__aeabi_cdcmpeq>
 80006e0:	bf0c      	ite	eq
 80006e2:	2001      	moveq	r0, #1
 80006e4:	2000      	movne	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_dcmplt>:
 80006ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f0:	f7ff ffea 	bl	80006c8 <__aeabi_cdcmpeq>
 80006f4:	bf34      	ite	cc
 80006f6:	2001      	movcc	r0, #1
 80006f8:	2000      	movcs	r0, #0
 80006fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fe:	bf00      	nop

08000700 <__aeabi_dcmple>:
 8000700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000704:	f7ff ffe0 	bl	80006c8 <__aeabi_cdcmpeq>
 8000708:	bf94      	ite	ls
 800070a:	2001      	movls	r0, #1
 800070c:	2000      	movhi	r0, #0
 800070e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000712:	bf00      	nop

08000714 <__aeabi_dcmpge>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff ffce 	bl	80006b8 <__aeabi_cdrcmple>
 800071c:	bf94      	ite	ls
 800071e:	2001      	movls	r0, #1
 8000720:	2000      	movhi	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_dcmpgt>:
 8000728:	f84d ed08 	str.w	lr, [sp, #-8]!
 800072c:	f7ff ffc4 	bl	80006b8 <__aeabi_cdrcmple>
 8000730:	bf34      	ite	cc
 8000732:	2001      	movcc	r0, #1
 8000734:	2000      	movcs	r0, #0
 8000736:	f85d fb08 	ldr.w	pc, [sp], #8
 800073a:	bf00      	nop

0800073c <__aeabi_d2iz>:
 800073c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000744:	d215      	bcs.n	8000772 <__aeabi_d2iz+0x36>
 8000746:	d511      	bpl.n	800076c <__aeabi_d2iz+0x30>
 8000748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d912      	bls.n	8000778 <__aeabi_d2iz+0x3c>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000762:	fa23 f002 	lsr.w	r0, r3, r2
 8000766:	bf18      	it	ne
 8000768:	4240      	negne	r0, r0
 800076a:	4770      	bx	lr
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	4770      	bx	lr
 8000772:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000776:	d105      	bne.n	8000784 <__aeabi_d2iz+0x48>
 8000778:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000782:	4770      	bx	lr
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <__aeabi_uldivmod>:
 800078c:	b953      	cbnz	r3, 80007a4 <__aeabi_uldivmod+0x18>
 800078e:	b94a      	cbnz	r2, 80007a4 <__aeabi_uldivmod+0x18>
 8000790:	2900      	cmp	r1, #0
 8000792:	bf08      	it	eq
 8000794:	2800      	cmpeq	r0, #0
 8000796:	bf1c      	itt	ne
 8000798:	f04f 31ff 	movne.w	r1, #4294967295
 800079c:	f04f 30ff 	movne.w	r0, #4294967295
 80007a0:	f000 b972 	b.w	8000a88 <__aeabi_idiv0>
 80007a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007ac:	f000 f806 	bl	80007bc <__udivmoddi4>
 80007b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr

080007bc <__udivmoddi4>:
 80007bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c0:	9e08      	ldr	r6, [sp, #32]
 80007c2:	4604      	mov	r4, r0
 80007c4:	4688      	mov	r8, r1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d14b      	bne.n	8000862 <__udivmoddi4+0xa6>
 80007ca:	428a      	cmp	r2, r1
 80007cc:	4615      	mov	r5, r2
 80007ce:	d967      	bls.n	80008a0 <__udivmoddi4+0xe4>
 80007d0:	fab2 f282 	clz	r2, r2
 80007d4:	b14a      	cbz	r2, 80007ea <__udivmoddi4+0x2e>
 80007d6:	f1c2 0720 	rsb	r7, r2, #32
 80007da:	fa01 f302 	lsl.w	r3, r1, r2
 80007de:	fa20 f707 	lsr.w	r7, r0, r7
 80007e2:	4095      	lsls	r5, r2
 80007e4:	ea47 0803 	orr.w	r8, r7, r3
 80007e8:	4094      	lsls	r4, r2
 80007ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007ee:	0c23      	lsrs	r3, r4, #16
 80007f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80007f4:	fa1f fc85 	uxth.w	ip, r5
 80007f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80007fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000800:	fb07 f10c 	mul.w	r1, r7, ip
 8000804:	4299      	cmp	r1, r3
 8000806:	d909      	bls.n	800081c <__udivmoddi4+0x60>
 8000808:	18eb      	adds	r3, r5, r3
 800080a:	f107 30ff 	add.w	r0, r7, #4294967295
 800080e:	f080 811b 	bcs.w	8000a48 <__udivmoddi4+0x28c>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 8118 	bls.w	8000a48 <__udivmoddi4+0x28c>
 8000818:	3f02      	subs	r7, #2
 800081a:	442b      	add	r3, r5
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb3 f0fe 	udiv	r0, r3, lr
 8000824:	fb0e 3310 	mls	r3, lr, r0, r3
 8000828:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800082c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000830:	45a4      	cmp	ip, r4
 8000832:	d909      	bls.n	8000848 <__udivmoddi4+0x8c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	f080 8107 	bcs.w	8000a4c <__udivmoddi4+0x290>
 800083e:	45a4      	cmp	ip, r4
 8000840:	f240 8104 	bls.w	8000a4c <__udivmoddi4+0x290>
 8000844:	3802      	subs	r0, #2
 8000846:	442c      	add	r4, r5
 8000848:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800084c:	eba4 040c 	sub.w	r4, r4, ip
 8000850:	2700      	movs	r7, #0
 8000852:	b11e      	cbz	r6, 800085c <__udivmoddi4+0xa0>
 8000854:	40d4      	lsrs	r4, r2
 8000856:	2300      	movs	r3, #0
 8000858:	e9c6 4300 	strd	r4, r3, [r6]
 800085c:	4639      	mov	r1, r7
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d909      	bls.n	800087a <__udivmoddi4+0xbe>
 8000866:	2e00      	cmp	r6, #0
 8000868:	f000 80eb 	beq.w	8000a42 <__udivmoddi4+0x286>
 800086c:	2700      	movs	r7, #0
 800086e:	e9c6 0100 	strd	r0, r1, [r6]
 8000872:	4638      	mov	r0, r7
 8000874:	4639      	mov	r1, r7
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087a:	fab3 f783 	clz	r7, r3
 800087e:	2f00      	cmp	r7, #0
 8000880:	d147      	bne.n	8000912 <__udivmoddi4+0x156>
 8000882:	428b      	cmp	r3, r1
 8000884:	d302      	bcc.n	800088c <__udivmoddi4+0xd0>
 8000886:	4282      	cmp	r2, r0
 8000888:	f200 80fa 	bhi.w	8000a80 <__udivmoddi4+0x2c4>
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	eb61 0303 	sbc.w	r3, r1, r3
 8000892:	2001      	movs	r0, #1
 8000894:	4698      	mov	r8, r3
 8000896:	2e00      	cmp	r6, #0
 8000898:	d0e0      	beq.n	800085c <__udivmoddi4+0xa0>
 800089a:	e9c6 4800 	strd	r4, r8, [r6]
 800089e:	e7dd      	b.n	800085c <__udivmoddi4+0xa0>
 80008a0:	b902      	cbnz	r2, 80008a4 <__udivmoddi4+0xe8>
 80008a2:	deff      	udf	#255	; 0xff
 80008a4:	fab2 f282 	clz	r2, r2
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 808f 	bne.w	80009cc <__udivmoddi4+0x210>
 80008ae:	1b49      	subs	r1, r1, r5
 80008b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008b4:	fa1f f885 	uxth.w	r8, r5
 80008b8:	2701      	movs	r7, #1
 80008ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80008be:	0c23      	lsrs	r3, r4, #16
 80008c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb08 f10c 	mul.w	r1, r8, ip
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d907      	bls.n	80008e0 <__udivmoddi4+0x124>
 80008d0:	18eb      	adds	r3, r5, r3
 80008d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008d6:	d202      	bcs.n	80008de <__udivmoddi4+0x122>
 80008d8:	4299      	cmp	r1, r3
 80008da:	f200 80cd 	bhi.w	8000a78 <__udivmoddi4+0x2bc>
 80008de:	4684      	mov	ip, r0
 80008e0:	1a59      	subs	r1, r3, r1
 80008e2:	b2a3      	uxth	r3, r4
 80008e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80008e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80008ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80008f0:	fb08 f800 	mul.w	r8, r8, r0
 80008f4:	45a0      	cmp	r8, r4
 80008f6:	d907      	bls.n	8000908 <__udivmoddi4+0x14c>
 80008f8:	192c      	adds	r4, r5, r4
 80008fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80008fe:	d202      	bcs.n	8000906 <__udivmoddi4+0x14a>
 8000900:	45a0      	cmp	r8, r4
 8000902:	f200 80b6 	bhi.w	8000a72 <__udivmoddi4+0x2b6>
 8000906:	4618      	mov	r0, r3
 8000908:	eba4 0408 	sub.w	r4, r4, r8
 800090c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000910:	e79f      	b.n	8000852 <__udivmoddi4+0x96>
 8000912:	f1c7 0c20 	rsb	ip, r7, #32
 8000916:	40bb      	lsls	r3, r7
 8000918:	fa22 fe0c 	lsr.w	lr, r2, ip
 800091c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000920:	fa01 f407 	lsl.w	r4, r1, r7
 8000924:	fa20 f50c 	lsr.w	r5, r0, ip
 8000928:	fa21 f30c 	lsr.w	r3, r1, ip
 800092c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000930:	4325      	orrs	r5, r4
 8000932:	fbb3 f9f8 	udiv	r9, r3, r8
 8000936:	0c2c      	lsrs	r4, r5, #16
 8000938:	fb08 3319 	mls	r3, r8, r9, r3
 800093c:	fa1f fa8e 	uxth.w	sl, lr
 8000940:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000944:	fb09 f40a 	mul.w	r4, r9, sl
 8000948:	429c      	cmp	r4, r3
 800094a:	fa02 f207 	lsl.w	r2, r2, r7
 800094e:	fa00 f107 	lsl.w	r1, r0, r7
 8000952:	d90b      	bls.n	800096c <__udivmoddi4+0x1b0>
 8000954:	eb1e 0303 	adds.w	r3, lr, r3
 8000958:	f109 30ff 	add.w	r0, r9, #4294967295
 800095c:	f080 8087 	bcs.w	8000a6e <__udivmoddi4+0x2b2>
 8000960:	429c      	cmp	r4, r3
 8000962:	f240 8084 	bls.w	8000a6e <__udivmoddi4+0x2b2>
 8000966:	f1a9 0902 	sub.w	r9, r9, #2
 800096a:	4473      	add	r3, lr
 800096c:	1b1b      	subs	r3, r3, r4
 800096e:	b2ad      	uxth	r5, r5
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800097c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000980:	45a2      	cmp	sl, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x1da>
 8000984:	eb1e 0404 	adds.w	r4, lr, r4
 8000988:	f100 33ff 	add.w	r3, r0, #4294967295
 800098c:	d26b      	bcs.n	8000a66 <__udivmoddi4+0x2aa>
 800098e:	45a2      	cmp	sl, r4
 8000990:	d969      	bls.n	8000a66 <__udivmoddi4+0x2aa>
 8000992:	3802      	subs	r0, #2
 8000994:	4474      	add	r4, lr
 8000996:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800099a:	fba0 8902 	umull	r8, r9, r0, r2
 800099e:	eba4 040a 	sub.w	r4, r4, sl
 80009a2:	454c      	cmp	r4, r9
 80009a4:	46c2      	mov	sl, r8
 80009a6:	464b      	mov	r3, r9
 80009a8:	d354      	bcc.n	8000a54 <__udivmoddi4+0x298>
 80009aa:	d051      	beq.n	8000a50 <__udivmoddi4+0x294>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d069      	beq.n	8000a84 <__udivmoddi4+0x2c8>
 80009b0:	ebb1 050a 	subs.w	r5, r1, sl
 80009b4:	eb64 0403 	sbc.w	r4, r4, r3
 80009b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80009bc:	40fd      	lsrs	r5, r7
 80009be:	40fc      	lsrs	r4, r7
 80009c0:	ea4c 0505 	orr.w	r5, ip, r5
 80009c4:	e9c6 5400 	strd	r5, r4, [r6]
 80009c8:	2700      	movs	r7, #0
 80009ca:	e747      	b.n	800085c <__udivmoddi4+0xa0>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f703 	lsr.w	r7, r0, r3
 80009d4:	4095      	lsls	r5, r2
 80009d6:	fa01 f002 	lsl.w	r0, r1, r2
 80009da:	fa21 f303 	lsr.w	r3, r1, r3
 80009de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009e2:	4338      	orrs	r0, r7
 80009e4:	0c01      	lsrs	r1, r0, #16
 80009e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80009ea:	fa1f f885 	uxth.w	r8, r5
 80009ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80009f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f6:	fb07 f308 	mul.w	r3, r7, r8
 80009fa:	428b      	cmp	r3, r1
 80009fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x256>
 8000a02:	1869      	adds	r1, r5, r1
 8000a04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a08:	d22f      	bcs.n	8000a6a <__udivmoddi4+0x2ae>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d92d      	bls.n	8000a6a <__udivmoddi4+0x2ae>
 8000a0e:	3f02      	subs	r7, #2
 8000a10:	4429      	add	r1, r5
 8000a12:	1acb      	subs	r3, r1, r3
 8000a14:	b281      	uxth	r1, r0
 8000a16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a22:	fb00 f308 	mul.w	r3, r0, r8
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x27e>
 8000a2a:	1869      	adds	r1, r5, r1
 8000a2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a30:	d217      	bcs.n	8000a62 <__udivmoddi4+0x2a6>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d915      	bls.n	8000a62 <__udivmoddi4+0x2a6>
 8000a36:	3802      	subs	r0, #2
 8000a38:	4429      	add	r1, r5
 8000a3a:	1ac9      	subs	r1, r1, r3
 8000a3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a40:	e73b      	b.n	80008ba <__udivmoddi4+0xfe>
 8000a42:	4637      	mov	r7, r6
 8000a44:	4630      	mov	r0, r6
 8000a46:	e709      	b.n	800085c <__udivmoddi4+0xa0>
 8000a48:	4607      	mov	r7, r0
 8000a4a:	e6e7      	b.n	800081c <__udivmoddi4+0x60>
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	e6fb      	b.n	8000848 <__udivmoddi4+0x8c>
 8000a50:	4541      	cmp	r1, r8
 8000a52:	d2ab      	bcs.n	80009ac <__udivmoddi4+0x1f0>
 8000a54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a58:	eb69 020e 	sbc.w	r2, r9, lr
 8000a5c:	3801      	subs	r0, #1
 8000a5e:	4613      	mov	r3, r2
 8000a60:	e7a4      	b.n	80009ac <__udivmoddi4+0x1f0>
 8000a62:	4660      	mov	r0, ip
 8000a64:	e7e9      	b.n	8000a3a <__udivmoddi4+0x27e>
 8000a66:	4618      	mov	r0, r3
 8000a68:	e795      	b.n	8000996 <__udivmoddi4+0x1da>
 8000a6a:	4667      	mov	r7, ip
 8000a6c:	e7d1      	b.n	8000a12 <__udivmoddi4+0x256>
 8000a6e:	4681      	mov	r9, r0
 8000a70:	e77c      	b.n	800096c <__udivmoddi4+0x1b0>
 8000a72:	3802      	subs	r0, #2
 8000a74:	442c      	add	r4, r5
 8000a76:	e747      	b.n	8000908 <__udivmoddi4+0x14c>
 8000a78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a7c:	442b      	add	r3, r5
 8000a7e:	e72f      	b.n	80008e0 <__udivmoddi4+0x124>
 8000a80:	4638      	mov	r0, r7
 8000a82:	e708      	b.n	8000896 <__udivmoddi4+0xda>
 8000a84:	4637      	mov	r7, r6
 8000a86:	e6e9      	b.n	800085c <__udivmoddi4+0xa0>

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_counter_period_(0){}
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_ZN5Motor4initEv>:

void Motor::init()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <_ZN5Motor4initEv+0x18>)
 8000ab4:	f002 fe8a 	bl	80037cc <HAL_TIM_PWM_Start>

}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000204 	.word	0x20000204

08000ac4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	uint16_t counter_period;

	if(temp_counter_period_ < 0) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	da0c      	bge.n	8000af0 <_ZN5Motor9motorCtrlEv+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2108      	movs	r1, #8
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <_ZN5Motor9motorCtrlEv+0x50>)
 8000adc:	f001 fef6 	bl	80028cc <HAL_GPIO_WritePin>
		counter_period = -1 * temp_counter_period_;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	425b      	negs	r3, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	81fb      	strh	r3, [r7, #14]
 8000aee:	e009      	b.n	8000b04 <_ZN5Motor9motorCtrlEv+0x40>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2108      	movs	r1, #8
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <_ZN5Motor9motorCtrlEv+0x50>)
 8000af6:	f001 fee9 	bl	80028cc <HAL_GPIO_WritePin>
		counter_period = temp_counter_period_;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, counter_period);
 8000b04:	89fa      	ldrh	r2, [r7, #14]
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <_ZN5Motor9motorCtrlEv+0x54>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40020000 	.word	0x40020000
 8000b18:	20000204 	.word	0x20000204
 8000b1c:	00000000 	.word	0x00000000

08000b20 <_ZN5Motor8setRatioEd>:

void Motor::setRatio(double ratio)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	ed87 0b00 	vstr	d0, [r7]
	if(ratio > 1) ratio = 1;
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <_ZN5Motor8setRatioEd+0x80>)
 8000b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b36:	f7ff fdf7 	bl	8000728 <__aeabi_dcmpgt>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d005      	beq.n	8000b4c <_ZN5Motor8setRatioEd+0x2c>
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	4c16      	ldr	r4, [pc, #88]	; (8000ba0 <_ZN5Motor8setRatioEd+0x80>)
 8000b46:	e9c7 3400 	strd	r3, r4, [r7]
 8000b4a:	e00e      	b.n	8000b6a <_ZN5Motor8setRatioEd+0x4a>
	else if(ratio < -1) ratio = -1;
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <_ZN5Motor8setRatioEd+0x84>)
 8000b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b56:	f7ff fdc9 	bl	80006ec <__aeabi_dcmplt>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <_ZN5Motor8setRatioEd+0x4a>
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	4c0f      	ldr	r4, [pc, #60]	; (8000ba4 <_ZN5Motor8setRatioEd+0x84>)
 8000b66:	e9c7 3400 	strd	r3, r4, [r7]

	temp_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * ratio);
 8000b6a:	a30b      	add	r3, pc, #44	; (adr r3, 8000b98 <_ZN5Motor8setRatioEd+0x78>)
 8000b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b74:	f7ff fb48 	bl	8000208 <__aeabi_dmul>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	4621      	mov	r1, r4
 8000b80:	f7ff fddc 	bl	800073c <__aeabi_d2iz>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	801a      	strh	r2, [r3, #0]

}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	f3af 8000 	nop.w
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	409c1c00 	.word	0x409c1c00
 8000ba0:	3ff00000 	.word	0x3ff00000
 8000ba4:	bff00000 	.word	0xbff00000

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
    ITM_SendChar(*ptr++);
  }
  return len;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10e      	bne.n	8000bd8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8000bba:	f000 fda3 	bl	8001704 <cppFlip1ms>

		tim6_timer++;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bc6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	dd02      	ble.n	8000bd8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	}

}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40001000 	.word	0x40001000
 8000be4:	200000c0 	.word	0x200000c0
 8000be8:	0001869f 	.word	0x0001869f

08000bec <init>:

void init()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <init+0x14>)
 8000bf2:	f002 fd9c 	bl	800372e <HAL_TIM_Base_Start_IT>
	cppInit();
 8000bf6:	f000 fd59 	bl	80016ac <cppInit>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001c4 	.word	0x200001c4

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fdce 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f816 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f000 fa4a 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c14:	f000 fa28 	bl	8001068 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c18:	f000 f944 	bl	8000ea4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c1c:	f000 f99a 	bl	8000f54 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000c20:	f000 f87e 	bl	8000d20 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000c24:	f000 f908 	bl	8000e38 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000c28:	f000 f8d8 	bl	8000ddc <MX_I2C3_Init>
  MX_TIM6_Init();
 8000c2c:	f000 f9e6 	bl	8000ffc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  init();
 8000c30:	f7ff ffdc 	bl	8000bec <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  cppLoop();
 8000c34:	f000 fd44 	bl	80016c0 <cppLoop>
 8000c38:	e7fc      	b.n	8000c34 <main+0x30>
	...

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2234      	movs	r2, #52	; 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fbae 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <SystemClock_Config+0xdc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a2b      	ldr	r2, [pc, #172]	; (8000d18 <SystemClock_Config+0xdc>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <SystemClock_Config+0xdc>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <SystemClock_Config+0xe0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <SystemClock_Config+0xe0>)
 8000c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <SystemClock_Config+0xe0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000cb0:	23b4      	movs	r3, #180	; 0xb4
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fa49 	bl	800315c <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd0:	f000 fa6a 	bl	80011a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd4:	f001 ff4c 	bl	8002b70 <HAL_PWREx_EnableOverDrive>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cde:	f000 fa63 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2105      	movs	r1, #5
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 ff85 	bl	8002c10 <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d0c:	f000 fa4c 	bl	80011a8 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <MX_ADC1_Init+0xb4>)
 8000d36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <MX_ADC1_Init+0xb8>)
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000d82:	f000 fda5 	bl	80018d0 <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f000 fa0c 	bl	80011a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d90:	2305      	movs	r3, #5
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000da2:	f000 fdd9 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dac:	f000 f9fc 	bl	80011a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_ADC1_Init+0xb0>)
 8000dba:	f000 fdcd 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000dc4:	f000 f9f0 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000011c 	.word	0x2000011c
 8000dd4:	40012000 	.word	0x40012000
 8000dd8:	0f000001 	.word	0x0f000001

08000ddc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <MX_I2C3_Init+0x54>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_I2C3_Init+0x58>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_I2C3_Init+0x50>)
 8000e1a:	f001 fd71 	bl	8002900 <HAL_I2C_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e24:	f000 f9c0 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000002c 	.word	0x2000002c
 8000e30:	40005c00 	.word	0x40005c00
 8000e34:	000186a0 	.word	0x000186a0

08000e38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e84:	220a      	movs	r2, #10
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_SPI3_Init+0x64>)
 8000e8a:	f002 fbc1 	bl	8003610 <HAL_SPI_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e94:	f000 f988 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200000c4 	.word	0x200000c4
 8000ea0:	40003c00 	.word	0x40003c00

08000ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1799;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000edc:	f240 7207 	movw	r2, #1799	; 0x707
 8000ee0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ef0:	f002 fc41 	bl	8003776 <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000efa:	f000 f955 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000f0e:	f003 f999 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f18:	f000 f946 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000f34:	f002 fe22 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f3e:	f000 f933 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000f44:	f000 fb26 	bl	8001594 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000204 	.word	0x20000204

08000f54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2224      	movs	r2, #36	; 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fa22 	bl	80043ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f96:	2303      	movs	r3, #3
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000fc2:	f002 fc41 	bl	8003848 <HAL_TIM_Encoder_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f000 f8ec 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_TIM4_Init+0xa0>)
 8000fde:	f003 f931 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000fe8:	f000 f8de 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000080 	.word	0x20000080
 8000ff8:	40000800 	.word	0x40000800

08000ffc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_TIM6_Init+0x64>)
 800100c:	4a15      	ldr	r2, [pc, #84]	; (8001064 <MX_TIM6_Init+0x68>)
 800100e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_TIM6_Init+0x64>)
 8001012:	2259      	movs	r2, #89	; 0x59
 8001014:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_TIM6_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_TIM6_Init+0x64>)
 800101e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001022:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_TIM6_Init+0x64>)
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_TIM6_Init+0x64>)
 800102c:	f002 fb54 	bl	80036d8 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001036:	f000 f8b7 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM6_Init+0x64>)
 8001048:	f003 f8fc 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001052:	f000 f8a9 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001c4 	.word	0x200001c4
 8001064:	40001000 	.word	0x40001000

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA_Init+0x3c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MX_DMA_Init+0x3c>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_DMA_Init+0x3c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f000 ff6b 	bl	8001f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f000 ff84 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <MX_GPIO_Init+0xf4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a35      	ldr	r2, [pc, #212]	; (800119c <MX_GPIO_Init+0xf4>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <MX_GPIO_Init+0xf4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <MX_GPIO_Init+0xf4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <MX_GPIO_Init+0xf4>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_GPIO_Init+0xf4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_GPIO_Init+0xf4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <MX_GPIO_Init+0xf4>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_GPIO_Init+0xf4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_GPIO_Init+0xf4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <MX_GPIO_Init+0xf4>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_GPIO_Init+0xf4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2108      	movs	r1, #8
 8001132:	481b      	ldr	r0, [pc, #108]	; (80011a0 <MX_GPIO_Init+0xf8>)
 8001134:	f001 fbca 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <MX_GPIO_Init+0xfc>)
 800113e:	f001 fbc5 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8001142:	2308      	movs	r3, #8
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <MX_GPIO_Init+0xf8>)
 800115a:	f001 fa25 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Pin SWB12_Pin */
  GPIO_InitStruct.Pin = SW_Pin|SWB12_Pin;
 800115e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_GPIO_Init+0xfc>)
 8001174:	f001 fa18 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001178:	2320      	movs	r3, #32
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_GPIO_Init+0xfc>)
 8001190:	f001 fa0a 	bl	80025a8 <HAL_GPIO_Init>

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ae:	e7fe      	b.n	80011ae <Error_Handler+0x6>

080011b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <HAL_ADC_MspInit+0xdc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d157      	bne.n	80012d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_ADC_MspInit+0xe0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MOTOR_CURRENT_Pin|ADC__Pin;
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	481d      	ldr	r0, [pc, #116]	; (80012e4 <HAL_ADC_MspInit+0xe4>)
 800126e:	f001 f99b 	bl	80025a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_ADC_MspInit+0xec>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 8001294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001298:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 800129c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012b8:	f000 fe8e 	bl	8001fd8 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80012c2:	f7ff ff71 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_ADC_MspInit+0xe8>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40012000 	.word	0x40012000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	20000164 	.word	0x20000164
 80012ec:	40026410 	.word	0x40026410

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_I2C_MspInit+0xc4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d14b      	bne.n	80013aa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800135c:	2304      	movs	r3, #4
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 8001368:	f001 f91e 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800136c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	2312      	movs	r3, #18
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800137e:	2304      	movs	r3, #4
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <HAL_I2C_MspInit+0xd0>)
 800138a:	f001 f90d 	bl	80025a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 8001398:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40005c00 	.word	0x40005c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_SPI_MspInit+0xa4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d13c      	bne.n	8001460 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_SPI_MspInit+0xa8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_SPI_MspInit+0xa8>)
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_SPI_MspInit+0xa8>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_SPI_MspInit+0xa8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <HAL_SPI_MspInit+0xa8>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_SPI_MspInit+0xa8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800141e:	2302      	movs	r3, #2
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 800142e:	2305      	movs	r3, #5
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_SPI_MspInit+0xac>)
 800143a:	f001 f8b5 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800143e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001450:	2306      	movs	r3, #6
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_SPI_MspInit+0xac>)
 800145c:	f001 f8a4 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40003c00 	.word	0x40003c00
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800

08001474 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001484:	d10d      	bne.n	80014a2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_TIM_Encoder_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_TIM_Encoder_MspInit+0x88>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_TIM_Encoder_MspInit+0x88>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_TIM_Encoder_MspInit+0x88>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_TIM_Encoder_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_TIM_Encoder_MspInit+0x88>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_TIM_Encoder_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800151e:	2302      	movs	r3, #2
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_TIM_Encoder_MspInit+0x8c>)
 800152a:	f001 f83d 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40000800 	.word	0x40000800
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_TIM_Base_MspInit+0x48>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d115      	bne.n	8001582 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_TIM_Base_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_TIM_Base_MspInit+0x4c>)
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_TIM_Base_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2036      	movs	r0, #54	; 0x36
 8001578:	f000 fcf7 	bl	8001f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800157c:	2036      	movs	r0, #54	; 0x36
 800157e:	f000 fd10 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40001000 	.word	0x40001000
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b4:	d11d      	bne.n	80015f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_TIM_MspPostInit+0x68>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_TIM_MspPostInit+0x68>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_TIM_MspPostInit+0x68>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 80015d2:	2302      	movs	r3, #2
 80015d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <HAL_TIM_MspPostInit+0x6c>)
 80015ee:	f000 ffdb 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f8fc 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM6_DAC_IRQHandler+0x10>)
 800165e:	f002 f985 	bl	800396c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001c4 	.word	0x200001c4

0800166c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA2_Stream0_IRQHandler+0x10>)
 8001672:	f000 fd5f 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000164 	.word	0x20000164

08001680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <SystemInit+0x28>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <SystemInit+0x28>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SystemInit+0x28>)
 8001696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169a:	609a      	str	r2, [r3, #8]
#endif
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <cppInit>:
#include "wrapper.hpp"
#include "Motor.hpp"

Motor motor;

void cppInit(void){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	motor.init();
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <cppInit+0x10>)
 80016b2:	f7ff f9f9 	bl	8000aa8 <_ZN5Motor4initEv>

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000028 	.word	0x20000028

080016c0 <cppLoop>:
void cppLoop(void){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	motor.setRatio(0.3);
 80016c4:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80016f0 <cppLoop+0x30>
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <cppLoop+0x40>)
 80016ca:	f7ff fa29 	bl	8000b20 <_ZN5Motor8setRatioEd>
	HAL_Delay(1000);
 80016ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d2:	f000 f8db 	bl	800188c <HAL_Delay>
	motor.setRatio(-0.3);
 80016d6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80016f8 <cppLoop+0x38>
 80016da:	4809      	ldr	r0, [pc, #36]	; (8001700 <cppLoop+0x40>)
 80016dc:	f7ff fa20 	bl	8000b20 <_ZN5Motor8setRatioEd>
	HAL_Delay(1000);
 80016e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e4:	f000 f8d2 	bl	800188c <HAL_Delay>

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	f3af 8000 	nop.w
 80016f0:	33333333 	.word	0x33333333
 80016f4:	3fd33333 	.word	0x3fd33333
 80016f8:	33333333 	.word	0x33333333
 80016fc:	bfd33333 	.word	0xbfd33333
 8001700:	20000028 	.word	0x20000028

08001704 <cppFlip1ms>:

void cppFlip1ms(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	motor.motorCtrl();
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <cppFlip1ms+0x10>)
 800170a:	f7ff f9db 	bl	8000ac4 <_ZN5Motor9motorCtrlEv>

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000028 	.word	0x20000028

08001718 <_Z41__static_initialization_and_destruction_0ii>:
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172e:	4293      	cmp	r3, r2
 8001730:	d102      	bne.n	8001738 <_Z41__static_initialization_and_destruction_0ii+0x20>
Motor motor;
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001734:	f7ff f9aa 	bl	8000a8c <_ZN5MotorC1Ev>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000028 	.word	0x20000028

08001744 <_GLOBAL__sub_I_motor>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffe3 	bl	8001718 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001758:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800175a:	e003      	b.n	8001764 <LoopCopyDataInit>

0800175c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800175e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001760:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001762:	3104      	adds	r1, #4

08001764 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001768:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800176a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800176c:	d3f6      	bcc.n	800175c <CopyDataInit>
  ldr  r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001770:	e002      	b.n	8001778 <LoopFillZerobss>

08001772 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001772:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001774:	f842 3b04 	str.w	r3, [r2], #4

08001778 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800177a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800177c:	d3f9      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800177e:	f7ff ff7f 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f002 fdef 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fa3d 	bl	8000c04 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001790:	08004408 	.word	0x08004408
  ldr  r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001798:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800179c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80017a0:	20000248 	.word	0x20000248

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 fbbf 	bl	8001f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fce8 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fbd7 	bl	8001fbe <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 fb9f 	bl	8001f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000008 	.word	0x20000008
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000244 	.word	0x20000244

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000244 	.word	0x20000244

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_Delay+0x40>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000008 	.word	0x20000008

080018d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e033      	b.n	800194e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fc86 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001916:	f023 0302 	bic.w	r3, r3, #2
 800191a:	f043 0202 	orr.w	r2, r3, #2
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f94a 	bl	8001bbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
 800193e:	e001      	b.n	8001944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x1c>
 8001970:	2302      	movs	r3, #2
 8001972:	e113      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x244>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b09      	cmp	r3, #9
 8001982:	d925      	bls.n	80019d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68d9      	ldr	r1, [r3, #12]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	3b1e      	subs	r3, #30
 800199a:	2207      	movs	r2, #7
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68d9      	ldr	r1, [r3, #12]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4403      	add	r3, r0
 80019c2:	3b1e      	subs	r3, #30
 80019c4:	409a      	lsls	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	e022      	b.n	8001a16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6919      	ldr	r1, [r3, #16]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	2207      	movs	r2, #7
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4403      	add	r3, r0
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d824      	bhi.n	8001a68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b05      	subs	r3, #5
 8001a30:	221f      	movs	r2, #31
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b05      	subs	r3, #5
 8001a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
 8001a66:	e04c      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d824      	bhi.n	8001aba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b23      	subs	r3, #35	; 0x23
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	400a      	ands	r2, r1
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b23      	subs	r3, #35	; 0x23
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab8:	e023      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b41      	subs	r3, #65	; 0x41
 8001acc:	221f      	movs	r2, #31
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b41      	subs	r3, #65	; 0x41
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_ADC_ConfigChannel+0x250>)
 8001b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_ADC_ConfigChannel+0x254>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d10f      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d10b      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_ADC_ConfigChannel+0x254>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12b      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_ADC_ConfigChannel+0x258>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x1f4>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b11      	cmp	r3, #17
 8001b4a:	d122      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ADC_ConfigChannel+0x258>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d111      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_ADC_ConfigChannel+0x25c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_ADC_ConfigChannel+0x260>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	0c9a      	lsrs	r2, r3, #18
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40012300 	.word	0x40012300
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	10000012 	.word	0x10000012
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	431bde83 	.word	0x431bde83

08001bbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc4:	4b79      	ldr	r3, [pc, #484]	; (8001dac <ADC_Init+0x1f0>)
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	021a      	lsls	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <ADC_Init+0x1f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d022      	beq.n	8001c9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6899      	ldr	r1, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e00f      	b.n	8001cba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0202 	bic.w	r2, r2, #2
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
 8001cd4:	005a      	lsls	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	035a      	lsls	r2, r3, #13
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	e007      	b.n	8001d30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	051a      	lsls	r2, r3, #20
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d72:	025a      	lsls	r2, r3, #9
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	029a      	lsls	r2, r3, #10
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40012300 	.word	0x40012300
 8001db0:	0f000001 	.word	0x0f000001

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	4907      	ldr	r1, [pc, #28]	; (8001e50 <__NVIC_EnableIRQ+0x38>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f20:	d301      	bcc.n	8001f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00f      	b.n	8001f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <SysTick_Config+0x40>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2e:	210f      	movs	r1, #15
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f7ff ff8e 	bl	8001e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <SysTick_Config+0x40>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <SysTick_Config+0x40>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	e000e010 	.word	0xe000e010

08001f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff29 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff3e 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff8e 	bl	8001ea8 <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5d 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff31 	bl	8001e18 <__NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffa2 	bl	8001f10 <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fc46 	bl	8001874 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e099      	b.n	8002128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002014:	e00f      	b.n	8002036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002016:	f7ff fc2d 	bl	8001874 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b05      	cmp	r3, #5
 8002022:	d908      	bls.n	8002036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e078      	b.n	8002128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e8      	bne.n	8002016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4b38      	ldr	r3, [pc, #224]	; (8002130 <HAL_DMA_Init+0x158>)
 8002050:	4013      	ands	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2b04      	cmp	r3, #4
 800208e:	d107      	bne.n	80020a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	4313      	orrs	r3, r2
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f023 0307 	bic.w	r3, r3, #7
 80020b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d117      	bne.n	80020fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00e      	beq.n	80020fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f9e9 	bl	80024b4 <DMA_CheckFifoParam>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020f6:	2301      	movs	r3, #1
 80020f8:	e016      	b.n	8002128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f9a0 	bl	8002448 <DMA_CalcBaseAndBitshift>
 8002108:	4603      	mov	r3, r0
 800210a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	223f      	movs	r2, #63	; 0x3f
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	f010803f 	.word	0xf010803f

08002134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_DMA_IRQHandler+0x258>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a92      	ldr	r2, [pc, #584]	; (8002390 <HAL_DMA_IRQHandler+0x25c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2208      	movs	r2, #8
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2208      	movs	r2, #8
 800218e:	409a      	lsls	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2204      	movs	r2, #4
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2210      	movs	r2, #16
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d043      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03c      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2210      	movs	r2, #16
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d024      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e01f      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e016      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2220      	movs	r2, #32
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 808e 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8086 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2220      	movs	r2, #32
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d136      	bne.n	800234c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0216 	bic.w	r2, r2, #22
 80022ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_DMA_IRQHandler+0x1da>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	223f      	movs	r2, #63	; 0x3f
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	2b00      	cmp	r3, #0
 8002340:	d07d      	beq.n	800243e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
        }
        return;
 800234a:	e078      	b.n	800243e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01c      	beq.n	8002394 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	2b00      	cmp	r3, #0
 800236e:	d030      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e02b      	b.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d027      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e022      	b.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
 800238c:	20000000 	.word	0x20000000
 8002390:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0210 	bic.w	r2, r2, #16
 80023b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d032      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d022      	beq.n	800242c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	429a      	cmp	r2, r3
 8002408:	d307      	bcc.n	800241a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f2      	bne.n	80023fe <HAL_DMA_IRQHandler+0x2ca>
 8002418:	e000      	b.n	800241c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800241a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0x30c>
        return;
 800243e:	bf00      	nop
    }
  }
}
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop

08002448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3b10      	subs	r3, #16
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <DMA_CalcBaseAndBitshift+0x64>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002462:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d909      	bls.n	800248a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800247e:	f023 0303 	bic.w	r3, r3, #3
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	; 0x58
 8002488:	e007      	b.n	800249a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	aaaaaaab 	.word	0xaaaaaaab
 80024b0:	080043ec 	.word	0x080043ec

080024b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11f      	bne.n	800250e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d855      	bhi.n	8002580 <DMA_CheckFifoParam+0xcc>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <DMA_CheckFifoParam+0x28>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024ff 	.word	0x080024ff
 80024e4:	080024ed 	.word	0x080024ed
 80024e8:	08002581 	.word	0x08002581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d045      	beq.n	8002584 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fc:	e042      	b.n	8002584 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002506:	d13f      	bne.n	8002588 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250c:	e03c      	b.n	8002588 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002516:	d121      	bne.n	800255c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d836      	bhi.n	800258c <DMA_CheckFifoParam+0xd8>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <DMA_CheckFifoParam+0x70>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	08002535 	.word	0x08002535
 8002528:	0800253b 	.word	0x0800253b
 800252c:	08002535 	.word	0x08002535
 8002530:	0800254d 	.word	0x0800254d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      break;
 8002538:	e02f      	b.n	800259a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d024      	beq.n	8002590 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254a:	e021      	b.n	8002590 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002554:	d11e      	bne.n	8002594 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800255a:	e01b      	b.n	8002594 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <DMA_CheckFifoParam+0xb4>
 8002562:	2b03      	cmp	r3, #3
 8002564:	d003      	beq.n	800256e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002566:	e018      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      break;
 800256c:	e015      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00e      	beq.n	8002598 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      break;
 800257e:	e00b      	b.n	8002598 <DMA_CheckFifoParam+0xe4>
      break;
 8002580:	bf00      	nop
 8002582:	e00a      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      break;
 8002584:	bf00      	nop
 8002586:	e008      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      break;
 8002588:	bf00      	nop
 800258a:	e006      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      break;
 800258c:	bf00      	nop
 800258e:	e004      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      break;
 8002590:	bf00      	nop
 8002592:	e002      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      break;   
 8002594:	bf00      	nop
 8002596:	e000      	b.n	800259a <DMA_CheckFifoParam+0xe6>
      break;
 8002598:	bf00      	nop
    }
  } 
  
  return status; 
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e165      	b.n	8002890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8154 	bne.w	800288a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d00b      	beq.n	8002602 <HAL_GPIO_Init+0x5a>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f6:	2b11      	cmp	r3, #17
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d130      	bne.n	8002664 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 0201 	and.w	r2, r3, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0xfc>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d123      	bne.n	80026ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	69b9      	ldr	r1, [r7, #24]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80ae 	beq.w	800288a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_GPIO_Init+0x2fc>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a5b      	ldr	r2, [pc, #364]	; (80028a4 <HAL_GPIO_Init+0x2fc>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_GPIO_Init+0x2fc>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800274a:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_GPIO_Init+0x300>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4e      	ldr	r2, [pc, #312]	; (80028ac <HAL_GPIO_Init+0x304>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d025      	beq.n	80027c2 <HAL_GPIO_Init+0x21a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_GPIO_Init+0x308>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <HAL_GPIO_Init+0x216>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_GPIO_Init+0x30c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x212>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4b      	ldr	r2, [pc, #300]	; (80028b8 <HAL_GPIO_Init+0x310>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x20e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4a      	ldr	r2, [pc, #296]	; (80028bc <HAL_GPIO_Init+0x314>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x20a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a49      	ldr	r2, [pc, #292]	; (80028c0 <HAL_GPIO_Init+0x318>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x206>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a48      	ldr	r2, [pc, #288]	; (80028c4 <HAL_GPIO_Init+0x31c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x202>
 80027a6:	2306      	movs	r3, #6
 80027a8:	e00c      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e00a      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e008      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e004      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027c2:	2300      	movs	r3, #0
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	f002 0203 	and.w	r2, r2, #3
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	4093      	lsls	r3, r2
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d4:	4934      	ldr	r1, [pc, #208]	; (80028a8 <HAL_GPIO_Init+0x300>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_GPIO_Init+0x320>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002806:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <HAL_GPIO_Init+0x320>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_GPIO_Init+0x320>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_GPIO_Init+0x320>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_GPIO_Init+0x320>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_GPIO_Init+0x320>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_GPIO_Init+0x320>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_GPIO_Init+0x320>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	f67f ae96 	bls.w	80025c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002898:	bf00      	nop
 800289a:	3724      	adds	r7, #36	; 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40021800 	.word	0x40021800
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e11f      	b.n	8002b52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fce2 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f000 fa46 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a7b      	ldr	r2, [pc, #492]	; (8002b5c <HAL_I2C_Init+0x25c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a7a      	ldr	r2, [pc, #488]	; (8002b60 <HAL_I2C_Init+0x260>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a77      	ldr	r2, [pc, #476]	; (8002b64 <HAL_I2C_Init+0x264>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0db      	b.n	8002b52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_I2C_Init+0x268>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a64      	ldr	r2, [pc, #400]	; (8002b5c <HAL_I2C_Init+0x25c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a63      	ldr	r2, [pc, #396]	; (8002b6c <HAL_I2C_Init+0x26c>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4956      	ldr	r1, [pc, #344]	; (8002b5c <HAL_I2C_Init+0x25c>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d80d      	bhi.n	8002a24 <HAL_I2C_Init+0x124>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	bf38      	it	cc
 8002a20:	2304      	movcc	r3, #4
 8002a22:	e04f      	b.n	8002ac4 <HAL_I2C_Init+0x1c4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_I2C_Init+0x150>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_I2C_Init+0x176>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x17e>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <HAL_I2C_Init+0x1c4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_I2C_Init+0x1a4>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e58      	subs	r0, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Init+0x1c4>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	000186a0 	.word	0x000186a0
 8002b60:	001e847f 	.word	0x001e847f
 8002b64:	003d08ff 	.word	0x003d08ff
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7fe fe6a 	bl	8001874 <HAL_GetTick>
 8002ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba2:	e009      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba4:	f7fe fe66 	bl	8001874 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e01f      	b.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bcc:	f7fe fe52 	bl	8001874 <HAL_GetTick>
 8002bd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bd2:	e009      	b.n	8002be8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd4:	f7fe fe4e 	bl	8001874 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be2:	d901      	bls.n	8002be8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e007      	b.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	420e0040 	.word	0x420e0040
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	420e0044 	.word	0x420e0044

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cc      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90c      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d044      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4934      	ldr	r1, [pc, #208]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fdb8 	bl	8001874 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fdb4 	bl	8001874 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d20c      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f841 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fd18 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	080043d4 	.word	0x080043d4
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002df8:	f7ff fff0 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	080043e4 	.word	0x080043e4

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e36:	4bc6      	ldr	r3, [pc, #792]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	f200 817e 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x324>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_RCC_GetSysClockFreq+0x30>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08003141 	.word	0x08003141
 8002e54:	08003141 	.word	0x08003141
 8002e58:	08003141 	.word	0x08003141
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08003141 	.word	0x08003141
 8002e64:	08003141 	.word	0x08003141
 8002e68:	08003141 	.word	0x08003141
 8002e6c:	08002e8d 	.word	0x08002e8d
 8002e70:	08003141 	.word	0x08003141
 8002e74:	08003141 	.word	0x08003141
 8002e78:	08003141 	.word	0x08003141
 8002e7c:	08002fe9 	.word	0x08002fe9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4bb4      	ldr	r3, [pc, #720]	; (8003154 <HAL_RCC_GetSysClockFreq+0x338>)
 8002e82:	613b      	str	r3, [r7, #16]
       break;
 8002e84:	e15f      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e86:	4bb4      	ldr	r3, [pc, #720]	; (8003158 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002e88:	613b      	str	r3, [r7, #16]
      break;
 8002e8a:	e15c      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e8c:	4bb0      	ldr	r3, [pc, #704]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e94:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e96:	4bae      	ldr	r3, [pc, #696]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d04a      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea2:	4bab      	ldr	r3, [pc, #684]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	f04f 0400 	mov.w	r4, #0
 8002eac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	ea03 0501 	and.w	r5, r3, r1
 8002eb8:	ea04 0602 	and.w	r6, r4, r2
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	f04f 0400 	mov.w	r4, #0
 8002ec8:	0154      	lsls	r4, r2, #5
 8002eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ece:	014b      	lsls	r3, r1, #5
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	1b49      	subs	r1, r1, r5
 8002ed6:	eb62 0206 	sbc.w	r2, r2, r6
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	f04f 0400 	mov.w	r4, #0
 8002ee2:	0194      	lsls	r4, r2, #6
 8002ee4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ee8:	018b      	lsls	r3, r1, #6
 8002eea:	1a5b      	subs	r3, r3, r1
 8002eec:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	00e2      	lsls	r2, r4, #3
 8002efa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002efe:	00d9      	lsls	r1, r3, #3
 8002f00:	460b      	mov	r3, r1
 8002f02:	4614      	mov	r4, r2
 8002f04:	195b      	adds	r3, r3, r5
 8002f06:	eb44 0406 	adc.w	r4, r4, r6
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	0262      	lsls	r2, r4, #9
 8002f14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f18:	0259      	lsls	r1, r3, #9
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4614      	mov	r4, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	4621      	mov	r1, r4
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f04f 0400 	mov.w	r4, #0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	f7fd fc2e 	bl	800078c <__aeabi_uldivmod>
 8002f30:	4603      	mov	r3, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e049      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f38:	4b85      	ldr	r3, [pc, #532]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	ea03 0501 	and.w	r5, r3, r1
 8002f4e:	ea04 0602 	and.w	r6, r4, r2
 8002f52:	4629      	mov	r1, r5
 8002f54:	4632      	mov	r2, r6
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f04f 0400 	mov.w	r4, #0
 8002f5e:	0154      	lsls	r4, r2, #5
 8002f60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f64:	014b      	lsls	r3, r1, #5
 8002f66:	4619      	mov	r1, r3
 8002f68:	4622      	mov	r2, r4
 8002f6a:	1b49      	subs	r1, r1, r5
 8002f6c:	eb62 0206 	sbc.w	r2, r2, r6
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	f04f 0400 	mov.w	r4, #0
 8002f78:	0194      	lsls	r4, r2, #6
 8002f7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f7e:	018b      	lsls	r3, r1, #6
 8002f80:	1a5b      	subs	r3, r3, r1
 8002f82:	eb64 0402 	sbc.w	r4, r4, r2
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	00e2      	lsls	r2, r4, #3
 8002f90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f94:	00d9      	lsls	r1, r3, #3
 8002f96:	460b      	mov	r3, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	195b      	adds	r3, r3, r5
 8002f9c:	eb44 0406 	adc.w	r4, r4, r6
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	02a2      	lsls	r2, r4, #10
 8002faa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fae:	0299      	lsls	r1, r3, #10
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f04f 0400 	mov.w	r4, #0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4623      	mov	r3, r4
 8002fc2:	f7fd fbe3 	bl	800078c <__aeabi_uldivmod>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fcc:	4b60      	ldr	r3, [pc, #384]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	613b      	str	r3, [r7, #16]
      break;
 8002fe6:	e0ae      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff2:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04a      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	f04f 0400 	mov.w	r4, #0
 8003008:	f240 11ff 	movw	r1, #511	; 0x1ff
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	ea03 0501 	and.w	r5, r3, r1
 8003014:	ea04 0602 	and.w	r6, r4, r2
 8003018:	4629      	mov	r1, r5
 800301a:	4632      	mov	r2, r6
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	f04f 0400 	mov.w	r4, #0
 8003024:	0154      	lsls	r4, r2, #5
 8003026:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800302a:	014b      	lsls	r3, r1, #5
 800302c:	4619      	mov	r1, r3
 800302e:	4622      	mov	r2, r4
 8003030:	1b49      	subs	r1, r1, r5
 8003032:	eb62 0206 	sbc.w	r2, r2, r6
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	f04f 0400 	mov.w	r4, #0
 800303e:	0194      	lsls	r4, r2, #6
 8003040:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003044:	018b      	lsls	r3, r1, #6
 8003046:	1a5b      	subs	r3, r3, r1
 8003048:	eb64 0402 	sbc.w	r4, r4, r2
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	00e2      	lsls	r2, r4, #3
 8003056:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800305a:	00d9      	lsls	r1, r3, #3
 800305c:	460b      	mov	r3, r1
 800305e:	4614      	mov	r4, r2
 8003060:	195b      	adds	r3, r3, r5
 8003062:	eb44 0406 	adc.w	r4, r4, r6
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	0262      	lsls	r2, r4, #9
 8003070:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003074:	0259      	lsls	r1, r3, #9
 8003076:	460b      	mov	r3, r1
 8003078:	4614      	mov	r4, r2
 800307a:	4618      	mov	r0, r3
 800307c:	4621      	mov	r1, r4
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	461a      	mov	r2, r3
 8003086:	4623      	mov	r3, r4
 8003088:	f7fd fb80 	bl	800078c <__aeabi_uldivmod>
 800308c:	4603      	mov	r3, r0
 800308e:	460c      	mov	r4, r1
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e049      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	ea03 0501 	and.w	r5, r3, r1
 80030aa:	ea04 0602 	and.w	r6, r4, r2
 80030ae:	4629      	mov	r1, r5
 80030b0:	4632      	mov	r2, r6
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f04f 0400 	mov.w	r4, #0
 80030ba:	0154      	lsls	r4, r2, #5
 80030bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030c0:	014b      	lsls	r3, r1, #5
 80030c2:	4619      	mov	r1, r3
 80030c4:	4622      	mov	r2, r4
 80030c6:	1b49      	subs	r1, r1, r5
 80030c8:	eb62 0206 	sbc.w	r2, r2, r6
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	0194      	lsls	r4, r2, #6
 80030d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	1a5b      	subs	r3, r3, r1
 80030de:	eb64 0402 	sbc.w	r4, r4, r2
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030f0:	00d9      	lsls	r1, r3, #3
 80030f2:	460b      	mov	r3, r1
 80030f4:	4614      	mov	r4, r2
 80030f6:	195b      	adds	r3, r3, r5
 80030f8:	eb44 0406 	adc.w	r4, r4, r6
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	02a2      	lsls	r2, r4, #10
 8003106:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800310a:	0299      	lsls	r1, r3, #10
 800310c:	460b      	mov	r3, r1
 800310e:	4614      	mov	r4, r2
 8003110:	4618      	mov	r0, r3
 8003112:	4621      	mov	r1, r4
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f04f 0400 	mov.w	r4, #0
 800311a:	461a      	mov	r2, r3
 800311c:	4623      	mov	r3, r4
 800311e:	f7fd fb35 	bl	800078c <__aeabi_uldivmod>
 8003122:	4603      	mov	r3, r0
 8003124:	460c      	mov	r4, r1
 8003126:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_GetSysClockFreq+0x334>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	0f1b      	lsrs	r3, r3, #28
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	613b      	str	r3, [r7, #16]
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <HAL_RCC_GetSysClockFreq+0x338>)
 8003142:	613b      	str	r3, [r7, #16]
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	693b      	ldr	r3, [r7, #16]
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8083 	beq.w	800327c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003176:	4b95      	ldr	r3, [pc, #596]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d019      	beq.n	80031b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003182:	4b92      	ldr	r3, [pc, #584]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800318e:	4b8f      	ldr	r3, [pc, #572]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319a:	d00c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319c:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d112      	bne.n	80031ce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a8:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b4:	d10b      	bne.n	80031ce <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d05b      	beq.n	800327a <HAL_RCC_OscConfig+0x11e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d157      	bne.n	800327a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e216      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x8a>
 80031d8:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e01d      	b.n	8003222 <HAL_RCC_OscConfig+0xc6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ee:	d10c      	bne.n	800320a <HAL_RCC_OscConfig+0xae>
 80031f0:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b73      	ldr	r3, [pc, #460]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a72      	ldr	r2, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e00b      	b.n	8003222 <HAL_RCC_OscConfig+0xc6>
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6f      	ldr	r2, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800321c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003220:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d013      	beq.n	8003252 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fb23 	bl	8001874 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003232:	f7fe fb1f 	bl	8001874 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1db      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003244:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0xd6>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fe fb0f 	bl	8001874 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325a:	f7fe fb0b 	bl	8001874 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b64      	cmp	r3, #100	; 0x64
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1c7      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326c:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0xfe>
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d06f      	beq.n	8003368 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003294:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800329c:	2b08      	cmp	r3, #8
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ac:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	d11c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b8:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c4:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_OscConfig+0x180>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e18f      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4938      	ldr	r1, [pc, #224]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f0:	e03a      	b.n	8003368 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d020      	beq.n	800333c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_RCC_OscConfig+0x274>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fab8 	bl	8001874 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003308:	f7fe fab4 	bl	8001874 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e170      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
 800333a:	e015      	b.n	8003368 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x274>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe fa97 	bl	8001874 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fe fa93 	bl	8001874 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e14f      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d037      	beq.n	80033e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337c:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x278>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe fa77 	bl	8001874 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe fa73 	bl	8001874 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e12f      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x270>)
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x22e>
 80033a8:	e01c      	b.n	80033e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_RCC_OscConfig+0x278>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe fa60 	bl	8001874 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b6:	e00f      	b.n	80033d8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fa5c 	bl	8001874 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d908      	bls.n	80033d8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e118      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b8a      	ldr	r3, [pc, #552]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e9      	bne.n	80033b8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b83      	ldr	r3, [pc, #524]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a75      	ldr	r2, [pc, #468]	; (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fe fa1b 	bl	8001874 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe fa17 	bl	8001874 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0d3      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x31a>
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x354>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x33c>
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a60      	ldr	r2, [pc, #384]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x354>
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe f9dc 	bl	8001874 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe f9d8 	bl	8001874 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e092      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x364>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe f9c6 	bl	8001874 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe f9c2 	bl	8001874 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e07c      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a3a      	ldr	r2, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d068      	beq.n	80035fa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d060      	beq.n	80035f6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d145      	bne.n	80035c8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353c:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x4b0>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe f997 	bl	8001874 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe f993 	bl	8001874 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e04f      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	019b      	lsls	r3, r3, #6
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	061b      	lsls	r3, r3, #24
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	071b      	lsls	r3, r3, #28
 8003594:	491b      	ldr	r1, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x4b0>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f968 	bl	8001874 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe f964 	bl	8001874 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e020      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x44c>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_OscConfig+0x4b0>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe f951 	bl	8001874 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe f94d 	bl	8001874 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e009      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_OscConfig+0x4a8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x47a>
 80035f4:	e001      	b.n	80035fa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	42470060 	.word	0x42470060

08003610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e056      	b.n	80036d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd fec1 	bl	80013c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	ea42 0103 	orr.w	r1, r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	f003 0104 	and.w	r1, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e01d      	b.n	8003726 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd ff20 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f000 fb1e 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d007      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e01d      	b.n	80037c4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fd fe69 	bl	8001474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f000 facf 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd0a 	bl	80041f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_TIM_PWM_Start+0x74>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_PWM_Start+0x2c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a14      	ldr	r2, [pc, #80]	; (8003844 <HAL_TIM_PWM_Start+0x78>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_TIM_PWM_Start+0x30>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_TIM_PWM_Start+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b06      	cmp	r3, #6
 8003822:	d007      	beq.n	8003834 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40010400 	.word	0x40010400

08003848 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e083      	b.n	8003964 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d106      	bne.n	8003876 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7fd fe1f 	bl	80014b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388c:	f023 0307 	bic.w	r3, r3, #7
 8003890:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f000 fa5b 	bl	8003d58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4313      	orrs	r3, r2
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038e8:	f023 030c 	bic.w	r3, r3, #12
 80038ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	4313      	orrs	r3, r2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	011a      	lsls	r2, r3, #4
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	031b      	lsls	r3, r3, #12
 8003918:	4313      	orrs	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4313      	orrs	r3, r2
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d122      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d11b      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0202 	mvn.w	r2, #2
 8003998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f9b4 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9a6 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f9b7 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d122      	bne.n	8003a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d11b      	bne.n	8003a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0204 	mvn.w	r2, #4
 80039ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f98a 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003a08:	e005      	b.n	8003a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f97c 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f98d 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d122      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d11b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0208 	mvn.w	r2, #8
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2204      	movs	r2, #4
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f960 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f952 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f963 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0210 	mvn.w	r2, #16
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f936 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f928 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f939 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0201 	mvn.w	r2, #1
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd f85c 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fc1a 	bl	8004350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8fe 	bl	8003d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0220 	mvn.w	r2, #32
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fbe4 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0b4      	b.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	f200 809f 	bhi.w	8003cec <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003ced 	.word	0x08003ced
 8003bbc:	08003ced 	.word	0x08003ced
 8003bc0:	08003ced 	.word	0x08003ced
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003ced 	.word	0x08003ced
 8003bcc:	08003ced 	.word	0x08003ced
 8003bd0:	08003ced 	.word	0x08003ced
 8003bd4:	08003c6b 	.word	0x08003c6b
 8003bd8:	08003ced 	.word	0x08003ced
 8003bdc:	08003ced 	.word	0x08003ced
 8003be0:	08003ced 	.word	0x08003ced
 8003be4:	08003cab 	.word	0x08003cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f952 	bl	8003e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	619a      	str	r2, [r3, #24]
      break;
 8003c26:	e062      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f9a2 	bl	8003f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]
      break;
 8003c68:	e041      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f9f7 	bl	8004064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0208 	orr.w	r2, r2, #8
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0204 	bic.w	r2, r2, #4
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
      break;
 8003ca8:	e021      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa4b 	bl	800414c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	61da      	str	r2, [r3, #28]
      break;
 8003cea:	e000      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003cec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a40      	ldr	r2, [pc, #256]	; (8003e6c <TIM_Base_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d00f      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3d      	ldr	r2, [pc, #244]	; (8003e70 <TIM_Base_SetConfig+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3c      	ldr	r2, [pc, #240]	; (8003e74 <TIM_Base_SetConfig+0x11c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3b      	ldr	r2, [pc, #236]	; (8003e78 <TIM_Base_SetConfig+0x120>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3a      	ldr	r2, [pc, #232]	; (8003e7c <TIM_Base_SetConfig+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <TIM_Base_SetConfig+0x114>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02b      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d027      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <TIM_Base_SetConfig+0x118>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d023      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <TIM_Base_SetConfig+0x11c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01f      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <TIM_Base_SetConfig+0x120>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01b      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <TIM_Base_SetConfig+0x124>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d017      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <TIM_Base_SetConfig+0x128>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <TIM_Base_SetConfig+0x12c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00f      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <TIM_Base_SetConfig+0x130>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <TIM_Base_SetConfig+0x134>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d007      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <TIM_Base_SetConfig+0x138>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <TIM_Base_SetConfig+0x13c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d108      	bne.n	8003e1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <TIM_Base_SetConfig+0x114>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0xf8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <TIM_Base_SetConfig+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	40001800 	.word	0x40001800
 8003e90:	40001c00 	.word	0x40001c00
 8003e94:	40002000 	.word	0x40002000

08003e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0302 	bic.w	r3, r3, #2
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <TIM_OC1_SetConfig+0xd8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC1_SetConfig+0x64>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <TIM_OC1_SetConfig+0xdc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10c      	bne.n	8003f16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0308 	bic.w	r3, r3, #8
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <TIM_OC1_SetConfig+0xd8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_OC1_SetConfig+0x8e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <TIM_OC1_SetConfig+0xdc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d111      	bne.n	8003f4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40010400 	.word	0x40010400

08003f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0210 	bic.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0320 	bic.w	r3, r3, #32
 8003fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <TIM_OC2_SetConfig+0xe4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_OC2_SetConfig+0x68>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a21      	ldr	r2, [pc, #132]	; (8004060 <TIM_OC2_SetConfig+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10d      	bne.n	8003ffc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a17      	ldr	r2, [pc, #92]	; (800405c <TIM_OC2_SetConfig+0xe4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC2_SetConfig+0x94>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a16      	ldr	r2, [pc, #88]	; (8004060 <TIM_OC2_SetConfig+0xe8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d113      	bne.n	8004034 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40010400 	.word	0x40010400

08004064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <TIM_OC3_SetConfig+0xe0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC3_SetConfig+0x66>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <TIM_OC3_SetConfig+0xe4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10d      	bne.n	80040e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a16      	ldr	r2, [pc, #88]	; (8004144 <TIM_OC3_SetConfig+0xe0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_OC3_SetConfig+0x92>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <TIM_OC3_SetConfig+0xe4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d113      	bne.n	800411e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40010000 	.word	0x40010000
 8004148:	40010400 	.word	0x40010400

0800414c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <TIM_OC4_SetConfig+0xa4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC4_SetConfig+0x68>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <TIM_OC4_SetConfig+0xa8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40010400 	.word	0x40010400

080041f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2201      	movs	r2, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	43db      	mvns	r3, r3
 800421a:	401a      	ands	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e05a      	b.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a21      	ldr	r2, [pc, #132]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d022      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d01d      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1a      	ldr	r2, [pc, #104]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40010400 	.word	0x40010400
 8004334:	40014000 	.word	0x40014000
 8004338:	40001800 	.word	0x40001800

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0d      	ldr	r6, [pc, #52]	; (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436a:	1ba4      	subs	r4, r4, r6
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2500      	movs	r5, #0
 8004370:	42a5      	cmp	r5, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4e0b      	ldr	r6, [pc, #44]	; (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	; (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 f820 	bl	80043bc <_init>
 800437c:	1ba4      	subs	r4, r4, r6
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2500      	movs	r5, #0
 8004382:	42a5      	cmp	r5, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800438c:	4798      	blx	r3
 800438e:	3501      	adds	r5, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004396:	4798      	blx	r3
 8004398:	3501      	adds	r5, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	080043fc 	.word	0x080043fc
 80043a0:	080043fc 	.word	0x080043fc
 80043a4:	080043fc 	.word	0x080043fc
 80043a8:	08004404 	.word	0x08004404

080043ac <memset>:
 80043ac:	4402      	add	r2, r0
 80043ae:	4603      	mov	r3, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <_init>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr

080043c8 <_fini>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr
